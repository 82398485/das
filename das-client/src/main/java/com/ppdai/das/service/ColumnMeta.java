/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ppdai.das.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-25")
public class ColumnMeta implements org.apache.thrift.TBase<ColumnMeta, ColumnMeta._Fields>, java.io.Serializable, Cloneable, Comparable<ColumnMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnMeta");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTO_INCREMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("autoIncremental", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKey", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField INSERTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("insertable", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("updatable", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ColumnMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ColumnMetaTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String name; // required
  public @org.apache.thrift.annotation.Nullable String type; // optional
  public boolean autoIncremental; // required
  public boolean primaryKey; // required
  public boolean insertable; // required
  public boolean updatable; // required
  public boolean version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    TYPE((short)2, "type"),
    AUTO_INCREMENTAL((short)3, "autoIncremental"),
    PRIMARY_KEY((short)4, "primaryKey"),
    INSERTABLE((short)5, "insertable"),
    UPDATABLE((short)6, "updatable"),
    VERSION((short)7, "version");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // TYPE
          return TYPE;
        case 3: // AUTO_INCREMENTAL
          return AUTO_INCREMENTAL;
        case 4: // PRIMARY_KEY
          return PRIMARY_KEY;
        case 5: // INSERTABLE
          return INSERTABLE;
        case 6: // UPDATABLE
          return UPDATABLE;
        case 7: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      }
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTOINCREMENTAL_ISSET_ID = 0;
  private static final int __PRIMARYKEY_ISSET_ID = 1;
  private static final int __INSERTABLE_ISSET_ID = 2;
  private static final int __UPDATABLE_ISSET_ID = 3;
  private static final int __VERSION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTO_INCREMENTAL, new org.apache.thrift.meta_data.FieldMetaData("autoIncremental", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIMARY_KEY, new org.apache.thrift.meta_data.FieldMetaData("primaryKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INSERTABLE, new org.apache.thrift.meta_data.FieldMetaData("insertable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPDATABLE, new org.apache.thrift.meta_data.FieldMetaData("updatable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnMeta.class, metaDataMap);
  }

  public ColumnMeta() {
  }

  public ColumnMeta(
    String name,
    boolean autoIncremental,
    boolean primaryKey,
    boolean insertable,
    boolean updatable,
    boolean version)
  {
    this();
    this.name = name;
    this.autoIncremental = autoIncremental;
    setAutoIncrementalIsSet(true);
    this.primaryKey = primaryKey;
    setPrimaryKeyIsSet(true);
    this.insertable = insertable;
    setInsertableIsSet(true);
    this.updatable = updatable;
    setUpdatableIsSet(true);
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnMeta(ColumnMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.autoIncremental = other.autoIncremental;
    this.primaryKey = other.primaryKey;
    this.insertable = other.insertable;
    this.updatable = other.updatable;
    this.version = other.version;
  }

  public ColumnMeta deepCopy() {
    return new ColumnMeta(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.type = null;
    setAutoIncrementalIsSet(false);
    this.autoIncremental = false;
    setPrimaryKeyIsSet(false);
    this.primaryKey = false;
    setInsertableIsSet(false);
    this.insertable = false;
    setUpdatableIsSet(false);
    this.updatable = false;
    setVersionIsSet(false);
    this.version = false;
  }

  @org.apache.thrift.annotation.Nullable
  public String getName() {
    return this.name;
  }

  public ColumnMeta setName(@org.apache.thrift.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getType() {
    return this.type;
  }

  public ColumnMeta setType(@org.apache.thrift.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public boolean isAutoIncremental() {
    return this.autoIncremental;
  }

  public ColumnMeta setAutoIncremental(boolean autoIncremental) {
    this.autoIncremental = autoIncremental;
    setAutoIncrementalIsSet(true);
    return this;
  }

  public void unsetAutoIncremental() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOINCREMENTAL_ISSET_ID);
  }

  /** Returns true if field autoIncremental is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoIncremental() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOINCREMENTAL_ISSET_ID);
  }

  public void setAutoIncrementalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOINCREMENTAL_ISSET_ID, value);
  }

  public boolean isPrimaryKey() {
    return this.primaryKey;
  }

  public ColumnMeta setPrimaryKey(boolean primaryKey) {
    this.primaryKey = primaryKey;
    setPrimaryKeyIsSet(true);
    return this;
  }

  public void unsetPrimaryKey() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIMARYKEY_ISSET_ID);
  }

  /** Returns true if field primaryKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKey() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIMARYKEY_ISSET_ID);
  }

  public void setPrimaryKeyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIMARYKEY_ISSET_ID, value);
  }

  public boolean isInsertable() {
    return this.insertable;
  }

  public ColumnMeta setInsertable(boolean insertable) {
    this.insertable = insertable;
    setInsertableIsSet(true);
    return this;
  }

  public void unsetInsertable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSERTABLE_ISSET_ID);
  }

  /** Returns true if field insertable is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSERTABLE_ISSET_ID);
  }

  public void setInsertableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSERTABLE_ISSET_ID, value);
  }

  public boolean isUpdatable() {
    return this.updatable;
  }

  public ColumnMeta setUpdatable(boolean updatable) {
    this.updatable = updatable;
    setUpdatableIsSet(true);
    return this;
  }

  public void unsetUpdatable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATABLE_ISSET_ID);
  }

  /** Returns true if field updatable is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATABLE_ISSET_ID);
  }

  public void setUpdatableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATABLE_ISSET_ID, value);
  }

  public boolean isVersion() {
    return this.version;
  }

  public ColumnMeta setVersion(boolean version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case AUTO_INCREMENTAL:
      if (value == null) {
        unsetAutoIncremental();
      } else {
        setAutoIncremental((Boolean)value);
      }
      break;

    case PRIMARY_KEY:
      if (value == null) {
        unsetPrimaryKey();
      } else {
        setPrimaryKey((Boolean)value);
      }
      break;

    case INSERTABLE:
      if (value == null) {
        unsetInsertable();
      } else {
        setInsertable((Boolean)value);
      }
      break;

    case UPDATABLE:
      if (value == null) {
        unsetUpdatable();
      } else {
        setUpdatable((Boolean)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case TYPE:
      return getType();

    case AUTO_INCREMENTAL:
      return isAutoIncremental();

    case PRIMARY_KEY:
      return isPrimaryKey();

    case INSERTABLE:
      return isInsertable();

    case UPDATABLE:
      return isUpdatable();

    case VERSION:
      return isVersion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case AUTO_INCREMENTAL:
      return isSetAutoIncremental();
    case PRIMARY_KEY:
      return isSetPrimaryKey();
    case INSERTABLE:
      return isSetInsertable();
    case UPDATABLE:
      return isSetUpdatable();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) {
        return false;
    }
    if (that instanceof ColumnMeta) {
        return this.equals((ColumnMeta)that);
    }
    return false;
  }

  public boolean equals(ColumnMeta that) {
    if (that == null) {
        return false;
    }
    if (this == that) {
        return true;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name)) {
          return false;
      }
      if (!this.name.equals(that.name)) {
          return false;
      }
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type)) {
          return false;
      }
      if (!this.type.equals(that.type)) {
          return false;
      }
    }

    boolean this_present_autoIncremental = true;
    boolean that_present_autoIncremental = true;
    if (this_present_autoIncremental || that_present_autoIncremental) {
      if (!(this_present_autoIncremental && that_present_autoIncremental)) {
          return false;
      }
      if (this.autoIncremental != that.autoIncremental) {
          return false;
      }
    }

    boolean this_present_primaryKey = true;
    boolean that_present_primaryKey = true;
    if (this_present_primaryKey || that_present_primaryKey) {
      if (!(this_present_primaryKey && that_present_primaryKey)) {
          return false;
      }
      if (this.primaryKey != that.primaryKey) {
          return false;
      }
    }

    boolean this_present_insertable = true;
    boolean that_present_insertable = true;
    if (this_present_insertable || that_present_insertable) {
      if (!(this_present_insertable && that_present_insertable)) {
          return false;
      }
      if (this.insertable != that.insertable) {
          return false;
      }
    }

    boolean this_present_updatable = true;
    boolean that_present_updatable = true;
    if (this_present_updatable || that_present_updatable) {
      if (!(this_present_updatable && that_present_updatable)) {
          return false;
      }
      if (this.updatable != that.updatable) {
          return false;
      }
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version)) {
          return false;
      }
      if (this.version != that.version) {
          return false;
      }
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName()) {
        hashCode = hashCode * 8191 + name.hashCode();
    }

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType()) {
        hashCode = hashCode * 8191 + type.hashCode();
    }

    hashCode = hashCode * 8191 + ((autoIncremental) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((primaryKey) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((insertable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((updatable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((version) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ColumnMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoIncremental()).compareTo(other.isSetAutoIncremental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoIncremental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoIncremental, other.autoIncremental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryKey()).compareTo(other.isSetPrimaryKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKey, other.primaryKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertable()).compareTo(other.isSetInsertable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertable, other.insertable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatable()).compareTo(other.isSetUpdatable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatable, other.updatable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnMeta(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetType()) {
      if (!first) {
          sb.append(", ");
      }
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (!first) {
        sb.append(", ");
    }
    sb.append("autoIncremental:");
    sb.append(this.autoIncremental);
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("primaryKey:");
    sb.append(this.primaryKey);
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("insertable:");
    sb.append(this.insertable);
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("updatable:");
    sb.append(this.updatable);
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ColumnMetaStandardScheme getScheme() {
      return new ColumnMetaStandardScheme();
    }
  }

  private static class ColumnMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<ColumnMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTO_INCREMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoIncremental = iprot.readBool();
              struct.setAutoIncrementalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIMARY_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.primaryKey = iprot.readBool();
              struct.setPrimaryKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INSERTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.insertable = iprot.readBool();
              struct.setInsertableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.updatable = iprot.readBool();
              struct.setUpdatableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.version = iprot.readBool();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(AUTO_INCREMENTAL_FIELD_DESC);
      oprot.writeBool(struct.autoIncremental);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIMARY_KEY_FIELD_DESC);
      oprot.writeBool(struct.primaryKey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INSERTABLE_FIELD_DESC);
      oprot.writeBool(struct.insertable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATABLE_FIELD_DESC);
      oprot.writeBool(struct.updatable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeBool(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ColumnMetaTupleScheme getScheme() {
      return new ColumnMetaTupleScheme();
    }
  }

  private static class ColumnMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<ColumnMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetAutoIncremental()) {
        optionals.set(2);
      }
      if (struct.isSetPrimaryKey()) {
        optionals.set(3);
      }
      if (struct.isSetInsertable()) {
        optionals.set(4);
      }
      if (struct.isSetUpdatable()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetAutoIncremental()) {
        oprot.writeBool(struct.autoIncremental);
      }
      if (struct.isSetPrimaryKey()) {
        oprot.writeBool(struct.primaryKey);
      }
      if (struct.isSetInsertable()) {
        oprot.writeBool(struct.insertable);
      }
      if (struct.isSetUpdatable()) {
        oprot.writeBool(struct.updatable);
      }
      if (struct.isSetVersion()) {
        oprot.writeBool(struct.version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.autoIncremental = iprot.readBool();
        struct.setAutoIncrementalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.primaryKey = iprot.readBool();
        struct.setPrimaryKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.insertable = iprot.readBool();
        struct.setInsertableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updatable = iprot.readBool();
        struct.setUpdatableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readBool();
        struct.setVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

