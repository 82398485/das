/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ppdai.das.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-25")
public class DasDiagInfo implements org.apache.thrift.TBase<DasDiagInfo, DasDiagInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DasDiagInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DasDiagInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SPACE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceLevel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DIAGNOSE_INFO_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("diagnoseInfoMap", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DasDiagInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DasDiagInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String name; // required
  public int spaceLevel; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<DasDiagInfo> entries; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<String,String> diagnoseInfoMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SPACE_LEVEL((short)2, "spaceLevel"),
    ENTRIES((short)3, "entries"),
    DIAGNOSE_INFO_MAP((short)4, "diagnoseInfoMap");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SPACE_LEVEL
          return SPACE_LEVEL;
        case 3: // ENTRIES
          return ENTRIES;
        case 4: // DIAGNOSE_INFO_MAP
          return DIAGNOSE_INFO_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      }
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPACELEVEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPACE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("spaceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DasDiagInfo"))));
    tmpMap.put(_Fields.DIAGNOSE_INFO_MAP, new org.apache.thrift.meta_data.FieldMetaData("diagnoseInfoMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DasDiagInfo.class, metaDataMap);
  }

  public DasDiagInfo() {
  }

  public DasDiagInfo(
    String name,
    int spaceLevel,
    java.util.List<DasDiagInfo> entries,
    java.util.Map<String,String> diagnoseInfoMap)
  {
    this();
    this.name = name;
    this.spaceLevel = spaceLevel;
    setSpaceLevelIsSet(true);
    this.entries = entries;
    this.diagnoseInfoMap = diagnoseInfoMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DasDiagInfo(DasDiagInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.spaceLevel = other.spaceLevel;
    if (other.isSetEntries()) {
      java.util.List<DasDiagInfo> __this__entries = new java.util.ArrayList<DasDiagInfo>(other.entries.size());
      for (DasDiagInfo other_element : other.entries) {
        __this__entries.add(new DasDiagInfo(other_element));
      }
      this.entries = __this__entries;
    }
    if (other.isSetDiagnoseInfoMap()) {
      java.util.Map<String,String> __this__diagnoseInfoMap = new java.util.HashMap<String,String>(other.diagnoseInfoMap);
      this.diagnoseInfoMap = __this__diagnoseInfoMap;
    }
  }

  @Override
  public DasDiagInfo deepCopy() {
    return new DasDiagInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setSpaceLevelIsSet(false);
    this.spaceLevel = 0;
    this.entries = null;
    this.diagnoseInfoMap = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getName() {
    return this.name;
  }

  public DasDiagInfo setName(@org.apache.thrift.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSpaceLevel() {
    return this.spaceLevel;
  }

  public DasDiagInfo setSpaceLevel(int spaceLevel) {
    this.spaceLevel = spaceLevel;
    setSpaceLevelIsSet(true);
    return this;
  }

  public void unsetSpaceLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPACELEVEL_ISSET_ID);
  }

  /** Returns true if field spaceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPACELEVEL_ISSET_ID);
  }

  public void setSpaceLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPACELEVEL_ISSET_ID, value);
  }

  public int getEntriesSize() {
    return (this.entries == null) ? 0 : this.entries.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<DasDiagInfo> getEntriesIterator() {
    return (this.entries == null) ? null : this.entries.iterator();
  }

  public void addToEntries(DasDiagInfo elem) {
    if (this.entries == null) {
      this.entries = new java.util.ArrayList<DasDiagInfo>();
    }
    this.entries.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<DasDiagInfo> getEntries() {
    return this.entries;
  }

  public DasDiagInfo setEntries(@org.apache.thrift.annotation.Nullable java.util.List<DasDiagInfo> entries) {
    this.entries = entries;
    return this;
  }

  public void unsetEntries() {
    this.entries = null;
  }

  /** Returns true if field entries is set (has been assigned a value) and false otherwise */
  public boolean isSetEntries() {
    return this.entries != null;
  }

  public void setEntriesIsSet(boolean value) {
    if (!value) {
      this.entries = null;
    }
  }

  public int getDiagnoseInfoMapSize() {
    return (this.diagnoseInfoMap == null) ? 0 : this.diagnoseInfoMap.size();
  }

  public void putToDiagnoseInfoMap(String key, String val) {
    if (this.diagnoseInfoMap == null) {
      this.diagnoseInfoMap = new java.util.HashMap<String,String>();
    }
    this.diagnoseInfoMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String,String> getDiagnoseInfoMap() {
    return this.diagnoseInfoMap;
  }

  public DasDiagInfo setDiagnoseInfoMap(@org.apache.thrift.annotation.Nullable java.util.Map<String,String> diagnoseInfoMap) {
    this.diagnoseInfoMap = diagnoseInfoMap;
    return this;
  }

  public void unsetDiagnoseInfoMap() {
    this.diagnoseInfoMap = null;
  }

  /** Returns true if field diagnoseInfoMap is set (has been assigned a value) and false otherwise */
  public boolean isSetDiagnoseInfoMap() {
    return this.diagnoseInfoMap != null;
  }

  public void setDiagnoseInfoMapIsSet(boolean value) {
    if (!value) {
      this.diagnoseInfoMap = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SPACE_LEVEL:
      if (value == null) {
        unsetSpaceLevel();
      } else {
        setSpaceLevel((Integer)value);
      }
      break;

    case ENTRIES:
      if (value == null) {
        unsetEntries();
      } else {
        setEntries((java.util.List<DasDiagInfo>)value);
      }
      break;

    case DIAGNOSE_INFO_MAP:
      if (value == null) {
        unsetDiagnoseInfoMap();
      } else {
        setDiagnoseInfoMap((java.util.Map<String,String>)value);
      }
      break;

    }
  }

  @Override
  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SPACE_LEVEL:
      return getSpaceLevel();

    case ENTRIES:
      return getEntries();

    case DIAGNOSE_INFO_MAP:
      return getDiagnoseInfoMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SPACE_LEVEL:
      return isSetSpaceLevel();
    case ENTRIES:
      return isSetEntries();
    case DIAGNOSE_INFO_MAP:
      return isSetDiagnoseInfoMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) {
        return false;
    }
    if (that instanceof DasDiagInfo) {
        return this.equals((DasDiagInfo)that);
    }
    return false;
  }

  public boolean equals(DasDiagInfo that) {
    if (that == null) {
        return false;
    }
    if (this == that) {
        return true;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name)) {
          return false;
      }
      if (!this.name.equals(that.name)) {
          return false;
      }
    }

    boolean this_present_spaceLevel = true;
    boolean that_present_spaceLevel = true;
    if (this_present_spaceLevel || that_present_spaceLevel) {
      if (!(this_present_spaceLevel && that_present_spaceLevel)) {
          return false;
      }
      if (this.spaceLevel != that.spaceLevel) {
          return false;
      }
    }

    boolean this_present_entries = true && this.isSetEntries();
    boolean that_present_entries = true && that.isSetEntries();
    if (this_present_entries || that_present_entries) {
      if (!(this_present_entries && that_present_entries)) {
          return false;
      }
      if (!this.entries.equals(that.entries)) {
          return false;
      }
    }

    boolean this_present_diagnoseInfoMap = true && this.isSetDiagnoseInfoMap();
    boolean that_present_diagnoseInfoMap = true && that.isSetDiagnoseInfoMap();
    if (this_present_diagnoseInfoMap || that_present_diagnoseInfoMap) {
      if (!(this_present_diagnoseInfoMap && that_present_diagnoseInfoMap)) {
          return false;
      }
      if (!this.diagnoseInfoMap.equals(that.diagnoseInfoMap)) {
          return false;
      }
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName()) {
        hashCode = hashCode * 8191 + name.hashCode();
    }

    hashCode = hashCode * 8191 + spaceLevel;

    hashCode = hashCode * 8191 + ((isSetEntries()) ? 131071 : 524287);
    if (isSetEntries()) {
        hashCode = hashCode * 8191 + entries.hashCode();
    }

    hashCode = hashCode * 8191 + ((isSetDiagnoseInfoMap()) ? 131071 : 524287);
    if (isSetDiagnoseInfoMap()) {
        hashCode = hashCode * 8191 + diagnoseInfoMap.hashCode();
    }

    return hashCode;
  }

  @Override
  public int compareTo(DasDiagInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceLevel()).compareTo(other.isSetSpaceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceLevel, other.spaceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntries()).compareTo(other.isSetEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, other.entries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiagnoseInfoMap()).compareTo(other.isSetDiagnoseInfoMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiagnoseInfoMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diagnoseInfoMap, other.diagnoseInfoMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @Override
  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DasDiagInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("spaceLevel:");
    sb.append(this.spaceLevel);
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("entries:");
    if (this.entries == null) {
      sb.append("null");
    } else {
      sb.append(this.entries);
    }
    first = false;
    if (!first) {
        sb.append(", ");
    }
    sb.append("diagnoseInfoMap:");
    if (this.diagnoseInfoMap == null) {
      sb.append("null");
    } else {
      sb.append(this.diagnoseInfoMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DasDiagInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public DasDiagInfoStandardScheme getScheme() {
      return new DasDiagInfoStandardScheme();
    }
  }

  private static class DasDiagInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<DasDiagInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, DasDiagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPACE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceLevel = iprot.readI32();
              struct.setSpaceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                struct.entries = new java.util.ArrayList<DasDiagInfo>(_list176.size);
                @org.apache.thrift.annotation.Nullable DasDiagInfo _elem177;
                for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                {
                  _elem177 = new DasDiagInfo();
                  _elem177.read(iprot);
                  struct.entries.add(_elem177);
                }
                iprot.readListEnd();
              }
              struct.setEntriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIAGNOSE_INFO_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map179 = iprot.readMapBegin();
                struct.diagnoseInfoMap = new java.util.HashMap<String,String>(2*_map179.size);
                @org.apache.thrift.annotation.Nullable String _key180;
                @org.apache.thrift.annotation.Nullable String _val181;
                for (int _i182 = 0; _i182 < _map179.size; ++_i182)
                {
                  _key180 = iprot.readString();
                  _val181 = iprot.readString();
                  struct.diagnoseInfoMap.put(_key180, _val181);
                }
                iprot.readMapEnd();
              }
              struct.setDiagnoseInfoMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, DasDiagInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPACE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.spaceLevel);
      oprot.writeFieldEnd();
      if (struct.entries != null) {
        oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entries.size()));
          for (DasDiagInfo _iter183 : struct.entries)
          {
            _iter183.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.diagnoseInfoMap != null) {
        oprot.writeFieldBegin(DIAGNOSE_INFO_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.diagnoseInfoMap.size()));
          for (java.util.Map.Entry<String, String> _iter184 : struct.diagnoseInfoMap.entrySet())
          {
            oprot.writeString(_iter184.getKey());
            oprot.writeString(_iter184.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DasDiagInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public DasDiagInfoTupleScheme getScheme() {
      return new DasDiagInfoTupleScheme();
    }
  }

  private static class DasDiagInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<DasDiagInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DasDiagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSpaceLevel()) {
        optionals.set(1);
      }
      if (struct.isSetEntries()) {
        optionals.set(2);
      }
      if (struct.isSetDiagnoseInfoMap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSpaceLevel()) {
        oprot.writeI32(struct.spaceLevel);
      }
      if (struct.isSetEntries()) {
        {
          oprot.writeI32(struct.entries.size());
          for (DasDiagInfo _iter185 : struct.entries)
          {
            _iter185.write(oprot);
          }
        }
      }
      if (struct.isSetDiagnoseInfoMap()) {
        {
          oprot.writeI32(struct.diagnoseInfoMap.size());
          for (java.util.Map.Entry<String, String> _iter186 : struct.diagnoseInfoMap.entrySet())
          {
            oprot.writeString(_iter186.getKey());
            oprot.writeString(_iter186.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DasDiagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spaceLevel = iprot.readI32();
        struct.setSpaceLevelIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entries = new java.util.ArrayList<DasDiagInfo>(_list187.size);
          @org.apache.thrift.annotation.Nullable DasDiagInfo _elem188;
          for (int _i189 = 0; _i189 < _list187.size; ++_i189)
          {
            _elem188 = new DasDiagInfo();
            _elem188.read(iprot);
            struct.entries.add(_elem188);
          }
        }
        struct.setEntriesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map190 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.diagnoseInfoMap = new java.util.HashMap<String,String>(2*_map190.size);
          @org.apache.thrift.annotation.Nullable String _key191;
          @org.apache.thrift.annotation.Nullable String _val192;
          for (int _i193 = 0; _i193 < _map190.size; ++_i193)
          {
            _key191 = iprot.readString();
            _val192 = iprot.readString();
            struct.diagnoseInfoMap.put(_key191, _val192);
          }
        }
        struct.setDiagnoseInfoMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

