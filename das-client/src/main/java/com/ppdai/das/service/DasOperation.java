/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ppdai.das.service;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-10-25")
public enum DasOperation implements org.apache.thrift.TEnum {
  Insert(0),
  BatchInsert(1),
  Delete(2),
  DeleteByPk(3),
  DeleteBySample(4),
  BatchDelete(5),
  Update(6),
  Select(7),
  Call(8),
  BatchUpdate(9),
  BatchSelect(10),
  BatchCall(11),
  Query(12),
  QueryObject(13),
  BatchQuery(14),
  QueryByPK(15),
  QueryBySample(16),
  CountBySample(17),
  InsertList(18),
  UpdateWithSqlBuilder(19),
  BatchUpdateWithSqlBuilder(20),
  QueryBySampleWithRange(21);

  private final int value;

  private DasOperation(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static DasOperation findByValue(int value) { 
    switch (value) {
      case 0:
        return Insert;
      case 1:
        return BatchInsert;
      case 2:
        return Delete;
      case 3:
        return DeleteByPk;
      case 4:
        return DeleteBySample;
      case 5:
        return BatchDelete;
      case 6:
        return Update;
      case 7:
        return Select;
      case 8:
        return Call;
      case 9:
        return BatchUpdate;
      case 10:
        return BatchSelect;
      case 11:
        return BatchCall;
      case 12:
        return Query;
      case 13:
        return QueryObject;
      case 14:
        return BatchQuery;
      case 15:
        return QueryByPK;
      case 16:
        return QueryBySample;
      case 17:
        return CountBySample;
      case 18:
        return InsertList;
      case 19:
        return UpdateWithSqlBuilder;
      case 20:
        return BatchUpdateWithSqlBuilder;
      case 21:
        return QueryBySampleWithRange;
      default:
        return null;
    }
  }
}
