/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ppdai.das.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-12-30")
public class DasRequest implements org.apache.thrift.TBase<DasRequest, DasRequest._Fields>, java.io.Serializable, Cloneable, Comparable<DasRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DasRequest");

  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIC_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("logicDbName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DAS_CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dasClientVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PPDAI_CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("ppdaiClientVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField HINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hints", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ENTITY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("entityList", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CALL_BUILDER_FIELD_DESC = new org.apache.thrift.protocol.TField("callBuilder", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField BATCH_UPDATE_BUILDER_FIELD_DESC = new org.apache.thrift.protocol.TField("batchUpdateBuilder", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField BATCH_CALL_BUILDER_FIELD_DESC = new org.apache.thrift.protocol.TField("batchCallBuilder", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SQL_BUILDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlBuilders", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTime", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DasRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DasRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String appId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String logicDbName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String dasClientVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ppdaiClientVersion; // required
  /**
   * 
   * @see DasOperation
   */
  public @org.apache.thrift.annotation.Nullable DasOperation operation; // required
  public @org.apache.thrift.annotation.Nullable DasTransactionId transactionId; // optional
  public @org.apache.thrift.annotation.Nullable DasHints hints; // optional
  public @org.apache.thrift.annotation.Nullable EntityList entityList; // optional
  public @org.apache.thrift.annotation.Nullable DasCallBuilder callBuilder; // optional
  public @org.apache.thrift.annotation.Nullable DasBatchUpdateBuilder batchUpdateBuilder; // optional
  public @org.apache.thrift.annotation.Nullable DasBatchCallBuilder batchCallBuilder; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<DasSqlBuilder> sqlBuilders; // optional
  public @org.apache.thrift.annotation.Nullable DasTraceId traceId; // optional
  public long sendTime; // required
  public long receiveTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_ID((short)1, "appId"),
    LOGIC_DB_NAME((short)2, "logicDbName"),
    DAS_CLIENT_VERSION((short)3, "dasClientVersion"),
    PPDAI_CLIENT_VERSION((short)4, "ppdaiClientVersion"),
    /**
     * 
     * @see DasOperation
     */
    OPERATION((short)5, "operation"),
    TRANSACTION_ID((short)6, "transactionId"),
    HINTS((short)7, "hints"),
    ENTITY_LIST((short)8, "entityList"),
    CALL_BUILDER((short)9, "callBuilder"),
    BATCH_UPDATE_BUILDER((short)10, "batchUpdateBuilder"),
    BATCH_CALL_BUILDER((short)11, "batchCallBuilder"),
    SQL_BUILDERS((short)12, "sqlBuilders"),
    TRACE_ID((short)13, "traceId"),
    SEND_TIME((short)14, "sendTime"),
    RECEIVE_TIME((short)15, "receiveTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_ID
          return APP_ID;
        case 2: // LOGIC_DB_NAME
          return LOGIC_DB_NAME;
        case 3: // DAS_CLIENT_VERSION
          return DAS_CLIENT_VERSION;
        case 4: // PPDAI_CLIENT_VERSION
          return PPDAI_CLIENT_VERSION;
        case 5: // OPERATION
          return OPERATION;
        case 6: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 7: // HINTS
          return HINTS;
        case 8: // ENTITY_LIST
          return ENTITY_LIST;
        case 9: // CALL_BUILDER
          return CALL_BUILDER;
        case 10: // BATCH_UPDATE_BUILDER
          return BATCH_UPDATE_BUILDER;
        case 11: // BATCH_CALL_BUILDER
          return BATCH_CALL_BUILDER;
        case 12: // SQL_BUILDERS
          return SQL_BUILDERS;
        case 13: // TRACE_ID
          return TRACE_ID;
        case 14: // SEND_TIME
          return SEND_TIME;
        case 15: // RECEIVE_TIME
          return RECEIVE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDTIME_ISSET_ID = 0;
  private static final int __RECEIVETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRANSACTION_ID,_Fields.HINTS,_Fields.ENTITY_LIST,_Fields.CALL_BUILDER,_Fields.BATCH_UPDATE_BUILDER,_Fields.BATCH_CALL_BUILDER,_Fields.SQL_BUILDERS,_Fields.TRACE_ID,_Fields.RECEIVE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIC_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("logicDbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAS_CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("dasClientVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PPDAI_CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("ppdaiClientVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DasOperation.class)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DasTransactionId.class)));
    tmpMap.put(_Fields.HINTS, new org.apache.thrift.meta_data.FieldMetaData("hints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DasHints.class)));
    tmpMap.put(_Fields.ENTITY_LIST, new org.apache.thrift.meta_data.FieldMetaData("entityList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntityList.class)));
    tmpMap.put(_Fields.CALL_BUILDER, new org.apache.thrift.meta_data.FieldMetaData("callBuilder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DasCallBuilder.class)));
    tmpMap.put(_Fields.BATCH_UPDATE_BUILDER, new org.apache.thrift.meta_data.FieldMetaData("batchUpdateBuilder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DasBatchUpdateBuilder.class)));
    tmpMap.put(_Fields.BATCH_CALL_BUILDER, new org.apache.thrift.meta_data.FieldMetaData("batchCallBuilder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DasBatchCallBuilder.class)));
    tmpMap.put(_Fields.SQL_BUILDERS, new org.apache.thrift.meta_data.FieldMetaData("sqlBuilders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DasSqlBuilder.class))));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DasTraceId")));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("receiveTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DasRequest.class, metaDataMap);
  }

  public DasRequest() {
  }

  public DasRequest(
    java.lang.String appId,
    java.lang.String logicDbName,
    java.lang.String dasClientVersion,
    java.lang.String ppdaiClientVersion,
    DasOperation operation,
    long sendTime)
  {
    this();
    this.appId = appId;
    this.logicDbName = logicDbName;
    this.dasClientVersion = dasClientVersion;
    this.ppdaiClientVersion = ppdaiClientVersion;
    this.operation = operation;
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DasRequest(DasRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetLogicDbName()) {
      this.logicDbName = other.logicDbName;
    }
    if (other.isSetDasClientVersion()) {
      this.dasClientVersion = other.dasClientVersion;
    }
    if (other.isSetPpdaiClientVersion()) {
      this.ppdaiClientVersion = other.ppdaiClientVersion;
    }
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetTransactionId()) {
      this.transactionId = new DasTransactionId(other.transactionId);
    }
    if (other.isSetHints()) {
      this.hints = new DasHints(other.hints);
    }
    if (other.isSetEntityList()) {
      this.entityList = new EntityList(other.entityList);
    }
    if (other.isSetCallBuilder()) {
      this.callBuilder = new DasCallBuilder(other.callBuilder);
    }
    if (other.isSetBatchUpdateBuilder()) {
      this.batchUpdateBuilder = new DasBatchUpdateBuilder(other.batchUpdateBuilder);
    }
    if (other.isSetBatchCallBuilder()) {
      this.batchCallBuilder = new DasBatchCallBuilder(other.batchCallBuilder);
    }
    if (other.isSetSqlBuilders()) {
      java.util.List<DasSqlBuilder> __this__sqlBuilders = new java.util.ArrayList<DasSqlBuilder>(other.sqlBuilders.size());
      for (DasSqlBuilder other_element : other.sqlBuilders) {
        __this__sqlBuilders.add(new DasSqlBuilder(other_element));
      }
      this.sqlBuilders = __this__sqlBuilders;
    }
    if (other.isSetTraceId()) {
      this.traceId = new DasTraceId(other.traceId);
    }
    this.sendTime = other.sendTime;
    this.receiveTime = other.receiveTime;
  }

  public DasRequest deepCopy() {
    return new DasRequest(this);
  }

  @Override
  public void clear() {
    this.appId = null;
    this.logicDbName = null;
    this.dasClientVersion = null;
    this.ppdaiClientVersion = null;
    this.operation = null;
    this.transactionId = null;
    this.hints = null;
    this.entityList = null;
    this.callBuilder = null;
    this.batchUpdateBuilder = null;
    this.batchCallBuilder = null;
    this.sqlBuilders = null;
    this.traceId = null;
    setSendTimeIsSet(false);
    this.sendTime = 0;
    setReceiveTimeIsSet(false);
    this.receiveTime = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppId() {
    return this.appId;
  }

  public DasRequest setAppId(@org.apache.thrift.annotation.Nullable java.lang.String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLogicDbName() {
    return this.logicDbName;
  }

  public DasRequest setLogicDbName(@org.apache.thrift.annotation.Nullable java.lang.String logicDbName) {
    this.logicDbName = logicDbName;
    return this;
  }

  public void unsetLogicDbName() {
    this.logicDbName = null;
  }

  /** Returns true if field logicDbName is set (has been assigned a value) and false otherwise */
  public boolean isSetLogicDbName() {
    return this.logicDbName != null;
  }

  public void setLogicDbNameIsSet(boolean value) {
    if (!value) {
      this.logicDbName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDasClientVersion() {
    return this.dasClientVersion;
  }

  public DasRequest setDasClientVersion(@org.apache.thrift.annotation.Nullable java.lang.String dasClientVersion) {
    this.dasClientVersion = dasClientVersion;
    return this;
  }

  public void unsetDasClientVersion() {
    this.dasClientVersion = null;
  }

  /** Returns true if field dasClientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDasClientVersion() {
    return this.dasClientVersion != null;
  }

  public void setDasClientVersionIsSet(boolean value) {
    if (!value) {
      this.dasClientVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPpdaiClientVersion() {
    return this.ppdaiClientVersion;
  }

  public DasRequest setPpdaiClientVersion(@org.apache.thrift.annotation.Nullable java.lang.String ppdaiClientVersion) {
    this.ppdaiClientVersion = ppdaiClientVersion;
    return this;
  }

  public void unsetPpdaiClientVersion() {
    this.ppdaiClientVersion = null;
  }

  /** Returns true if field ppdaiClientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPpdaiClientVersion() {
    return this.ppdaiClientVersion != null;
  }

  public void setPpdaiClientVersionIsSet(boolean value) {
    if (!value) {
      this.ppdaiClientVersion = null;
    }
  }

  /**
   * 
   * @see DasOperation
   */
  @org.apache.thrift.annotation.Nullable
  public DasOperation getOperation() {
    return this.operation;
  }

  /**
   * 
   * @see DasOperation
   */
  public DasRequest setOperation(@org.apache.thrift.annotation.Nullable DasOperation operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DasTransactionId getTransactionId() {
    return this.transactionId;
  }

  public DasRequest setTransactionId(@org.apache.thrift.annotation.Nullable DasTransactionId transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  public void unsetTransactionId() {
    this.transactionId = null;
  }

  /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionId() {
    return this.transactionId != null;
  }

  public void setTransactionIdIsSet(boolean value) {
    if (!value) {
      this.transactionId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DasHints getHints() {
    return this.hints;
  }

  public DasRequest setHints(@org.apache.thrift.annotation.Nullable DasHints hints) {
    this.hints = hints;
    return this;
  }

  public void unsetHints() {
    this.hints = null;
  }

  /** Returns true if field hints is set (has been assigned a value) and false otherwise */
  public boolean isSetHints() {
    return this.hints != null;
  }

  public void setHintsIsSet(boolean value) {
    if (!value) {
      this.hints = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public EntityList getEntityList() {
    return this.entityList;
  }

  public DasRequest setEntityList(@org.apache.thrift.annotation.Nullable EntityList entityList) {
    this.entityList = entityList;
    return this;
  }

  public void unsetEntityList() {
    this.entityList = null;
  }

  /** Returns true if field entityList is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityList() {
    return this.entityList != null;
  }

  public void setEntityListIsSet(boolean value) {
    if (!value) {
      this.entityList = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DasCallBuilder getCallBuilder() {
    return this.callBuilder;
  }

  public DasRequest setCallBuilder(@org.apache.thrift.annotation.Nullable DasCallBuilder callBuilder) {
    this.callBuilder = callBuilder;
    return this;
  }

  public void unsetCallBuilder() {
    this.callBuilder = null;
  }

  /** Returns true if field callBuilder is set (has been assigned a value) and false otherwise */
  public boolean isSetCallBuilder() {
    return this.callBuilder != null;
  }

  public void setCallBuilderIsSet(boolean value) {
    if (!value) {
      this.callBuilder = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DasBatchUpdateBuilder getBatchUpdateBuilder() {
    return this.batchUpdateBuilder;
  }

  public DasRequest setBatchUpdateBuilder(@org.apache.thrift.annotation.Nullable DasBatchUpdateBuilder batchUpdateBuilder) {
    this.batchUpdateBuilder = batchUpdateBuilder;
    return this;
  }

  public void unsetBatchUpdateBuilder() {
    this.batchUpdateBuilder = null;
  }

  /** Returns true if field batchUpdateBuilder is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchUpdateBuilder() {
    return this.batchUpdateBuilder != null;
  }

  public void setBatchUpdateBuilderIsSet(boolean value) {
    if (!value) {
      this.batchUpdateBuilder = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DasBatchCallBuilder getBatchCallBuilder() {
    return this.batchCallBuilder;
  }

  public DasRequest setBatchCallBuilder(@org.apache.thrift.annotation.Nullable DasBatchCallBuilder batchCallBuilder) {
    this.batchCallBuilder = batchCallBuilder;
    return this;
  }

  public void unsetBatchCallBuilder() {
    this.batchCallBuilder = null;
  }

  /** Returns true if field batchCallBuilder is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchCallBuilder() {
    return this.batchCallBuilder != null;
  }

  public void setBatchCallBuilderIsSet(boolean value) {
    if (!value) {
      this.batchCallBuilder = null;
    }
  }

  public int getSqlBuildersSize() {
    return (this.sqlBuilders == null) ? 0 : this.sqlBuilders.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<DasSqlBuilder> getSqlBuildersIterator() {
    return (this.sqlBuilders == null) ? null : this.sqlBuilders.iterator();
  }

  public void addToSqlBuilders(DasSqlBuilder elem) {
    if (this.sqlBuilders == null) {
      this.sqlBuilders = new java.util.ArrayList<DasSqlBuilder>();
    }
    this.sqlBuilders.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<DasSqlBuilder> getSqlBuilders() {
    return this.sqlBuilders;
  }

  public DasRequest setSqlBuilders(@org.apache.thrift.annotation.Nullable java.util.List<DasSqlBuilder> sqlBuilders) {
    this.sqlBuilders = sqlBuilders;
    return this;
  }

  public void unsetSqlBuilders() {
    this.sqlBuilders = null;
  }

  /** Returns true if field sqlBuilders is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlBuilders() {
    return this.sqlBuilders != null;
  }

  public void setSqlBuildersIsSet(boolean value) {
    if (!value) {
      this.sqlBuilders = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DasTraceId getTraceId() {
    return this.traceId;
  }

  public DasRequest setTraceId(@org.apache.thrift.annotation.Nullable DasTraceId traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public long getSendTime() {
    return this.sendTime;
  }

  public DasRequest setSendTime(long sendTime) {
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    return this;
  }

  public void unsetSendTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  public void setSendTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDTIME_ISSET_ID, value);
  }

  public long getReceiveTime() {
    return this.receiveTime;
  }

  public DasRequest setReceiveTime(long receiveTime) {
    this.receiveTime = receiveTime;
    setReceiveTimeIsSet(true);
    return this;
  }

  public void unsetReceiveTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVETIME_ISSET_ID);
  }

  /** Returns true if field receiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVETIME_ISSET_ID);
  }

  public void setReceiveTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((java.lang.String)value);
      }
      break;

    case LOGIC_DB_NAME:
      if (value == null) {
        unsetLogicDbName();
      } else {
        setLogicDbName((java.lang.String)value);
      }
      break;

    case DAS_CLIENT_VERSION:
      if (value == null) {
        unsetDasClientVersion();
      } else {
        setDasClientVersion((java.lang.String)value);
      }
      break;

    case PPDAI_CLIENT_VERSION:
      if (value == null) {
        unsetPpdaiClientVersion();
      } else {
        setPpdaiClientVersion((java.lang.String)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((DasOperation)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionId();
      } else {
        setTransactionId((DasTransactionId)value);
      }
      break;

    case HINTS:
      if (value == null) {
        unsetHints();
      } else {
        setHints((DasHints)value);
      }
      break;

    case ENTITY_LIST:
      if (value == null) {
        unsetEntityList();
      } else {
        setEntityList((EntityList)value);
      }
      break;

    case CALL_BUILDER:
      if (value == null) {
        unsetCallBuilder();
      } else {
        setCallBuilder((DasCallBuilder)value);
      }
      break;

    case BATCH_UPDATE_BUILDER:
      if (value == null) {
        unsetBatchUpdateBuilder();
      } else {
        setBatchUpdateBuilder((DasBatchUpdateBuilder)value);
      }
      break;

    case BATCH_CALL_BUILDER:
      if (value == null) {
        unsetBatchCallBuilder();
      } else {
        setBatchCallBuilder((DasBatchCallBuilder)value);
      }
      break;

    case SQL_BUILDERS:
      if (value == null) {
        unsetSqlBuilders();
      } else {
        setSqlBuilders((java.util.List<DasSqlBuilder>)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((DasTraceId)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((java.lang.Long)value);
      }
      break;

    case RECEIVE_TIME:
      if (value == null) {
        unsetReceiveTime();
      } else {
        setReceiveTime((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_ID:
      return getAppId();

    case LOGIC_DB_NAME:
      return getLogicDbName();

    case DAS_CLIENT_VERSION:
      return getDasClientVersion();

    case PPDAI_CLIENT_VERSION:
      return getPpdaiClientVersion();

    case OPERATION:
      return getOperation();

    case TRANSACTION_ID:
      return getTransactionId();

    case HINTS:
      return getHints();

    case ENTITY_LIST:
      return getEntityList();

    case CALL_BUILDER:
      return getCallBuilder();

    case BATCH_UPDATE_BUILDER:
      return getBatchUpdateBuilder();

    case BATCH_CALL_BUILDER:
      return getBatchCallBuilder();

    case SQL_BUILDERS:
      return getSqlBuilders();

    case TRACE_ID:
      return getTraceId();

    case SEND_TIME:
      return getSendTime();

    case RECEIVE_TIME:
      return getReceiveTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APP_ID:
      return isSetAppId();
    case LOGIC_DB_NAME:
      return isSetLogicDbName();
    case DAS_CLIENT_VERSION:
      return isSetDasClientVersion();
    case PPDAI_CLIENT_VERSION:
      return isSetPpdaiClientVersion();
    case OPERATION:
      return isSetOperation();
    case TRANSACTION_ID:
      return isSetTransactionId();
    case HINTS:
      return isSetHints();
    case ENTITY_LIST:
      return isSetEntityList();
    case CALL_BUILDER:
      return isSetCallBuilder();
    case BATCH_UPDATE_BUILDER:
      return isSetBatchUpdateBuilder();
    case BATCH_CALL_BUILDER:
      return isSetBatchCallBuilder();
    case SQL_BUILDERS:
      return isSetSqlBuilders();
    case TRACE_ID:
      return isSetTraceId();
    case SEND_TIME:
      return isSetSendTime();
    case RECEIVE_TIME:
      return isSetReceiveTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DasRequest)
      return this.equals((DasRequest)that);
    return false;
  }

  public boolean equals(DasRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_logicDbName = true && this.isSetLogicDbName();
    boolean that_present_logicDbName = true && that.isSetLogicDbName();
    if (this_present_logicDbName || that_present_logicDbName) {
      if (!(this_present_logicDbName && that_present_logicDbName))
        return false;
      if (!this.logicDbName.equals(that.logicDbName))
        return false;
    }

    boolean this_present_dasClientVersion = true && this.isSetDasClientVersion();
    boolean that_present_dasClientVersion = true && that.isSetDasClientVersion();
    if (this_present_dasClientVersion || that_present_dasClientVersion) {
      if (!(this_present_dasClientVersion && that_present_dasClientVersion))
        return false;
      if (!this.dasClientVersion.equals(that.dasClientVersion))
        return false;
    }

    boolean this_present_ppdaiClientVersion = true && this.isSetPpdaiClientVersion();
    boolean that_present_ppdaiClientVersion = true && that.isSetPpdaiClientVersion();
    if (this_present_ppdaiClientVersion || that_present_ppdaiClientVersion) {
      if (!(this_present_ppdaiClientVersion && that_present_ppdaiClientVersion))
        return false;
      if (!this.ppdaiClientVersion.equals(that.ppdaiClientVersion))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_transactionId = true && this.isSetTransactionId();
    boolean that_present_transactionId = true && that.isSetTransactionId();
    if (this_present_transactionId || that_present_transactionId) {
      if (!(this_present_transactionId && that_present_transactionId))
        return false;
      if (!this.transactionId.equals(that.transactionId))
        return false;
    }

    boolean this_present_hints = true && this.isSetHints();
    boolean that_present_hints = true && that.isSetHints();
    if (this_present_hints || that_present_hints) {
      if (!(this_present_hints && that_present_hints))
        return false;
      if (!this.hints.equals(that.hints))
        return false;
    }

    boolean this_present_entityList = true && this.isSetEntityList();
    boolean that_present_entityList = true && that.isSetEntityList();
    if (this_present_entityList || that_present_entityList) {
      if (!(this_present_entityList && that_present_entityList))
        return false;
      if (!this.entityList.equals(that.entityList))
        return false;
    }

    boolean this_present_callBuilder = true && this.isSetCallBuilder();
    boolean that_present_callBuilder = true && that.isSetCallBuilder();
    if (this_present_callBuilder || that_present_callBuilder) {
      if (!(this_present_callBuilder && that_present_callBuilder))
        return false;
      if (!this.callBuilder.equals(that.callBuilder))
        return false;
    }

    boolean this_present_batchUpdateBuilder = true && this.isSetBatchUpdateBuilder();
    boolean that_present_batchUpdateBuilder = true && that.isSetBatchUpdateBuilder();
    if (this_present_batchUpdateBuilder || that_present_batchUpdateBuilder) {
      if (!(this_present_batchUpdateBuilder && that_present_batchUpdateBuilder))
        return false;
      if (!this.batchUpdateBuilder.equals(that.batchUpdateBuilder))
        return false;
    }

    boolean this_present_batchCallBuilder = true && this.isSetBatchCallBuilder();
    boolean that_present_batchCallBuilder = true && that.isSetBatchCallBuilder();
    if (this_present_batchCallBuilder || that_present_batchCallBuilder) {
      if (!(this_present_batchCallBuilder && that_present_batchCallBuilder))
        return false;
      if (!this.batchCallBuilder.equals(that.batchCallBuilder))
        return false;
    }

    boolean this_present_sqlBuilders = true && this.isSetSqlBuilders();
    boolean that_present_sqlBuilders = true && that.isSetSqlBuilders();
    if (this_present_sqlBuilders || that_present_sqlBuilders) {
      if (!(this_present_sqlBuilders && that_present_sqlBuilders))
        return false;
      if (!this.sqlBuilders.equals(that.sqlBuilders))
        return false;
    }

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_sendTime = true;
    boolean that_present_sendTime = true;
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (this.sendTime != that.sendTime)
        return false;
    }

    boolean this_present_receiveTime = true && this.isSetReceiveTime();
    boolean that_present_receiveTime = true && that.isSetReceiveTime();
    if (this_present_receiveTime || that_present_receiveTime) {
      if (!(this_present_receiveTime && that_present_receiveTime))
        return false;
      if (this.receiveTime != that.receiveTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogicDbName()) ? 131071 : 524287);
    if (isSetLogicDbName())
      hashCode = hashCode * 8191 + logicDbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDasClientVersion()) ? 131071 : 524287);
    if (isSetDasClientVersion())
      hashCode = hashCode * 8191 + dasClientVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetPpdaiClientVersion()) ? 131071 : 524287);
    if (isSetPpdaiClientVersion())
      hashCode = hashCode * 8191 + ppdaiClientVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperation()) ? 131071 : 524287);
    if (isSetOperation())
      hashCode = hashCode * 8191 + operation.getValue();

    hashCode = hashCode * 8191 + ((isSetTransactionId()) ? 131071 : 524287);
    if (isSetTransactionId())
      hashCode = hashCode * 8191 + transactionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHints()) ? 131071 : 524287);
    if (isSetHints())
      hashCode = hashCode * 8191 + hints.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntityList()) ? 131071 : 524287);
    if (isSetEntityList())
      hashCode = hashCode * 8191 + entityList.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallBuilder()) ? 131071 : 524287);
    if (isSetCallBuilder())
      hashCode = hashCode * 8191 + callBuilder.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatchUpdateBuilder()) ? 131071 : 524287);
    if (isSetBatchUpdateBuilder())
      hashCode = hashCode * 8191 + batchUpdateBuilder.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatchCallBuilder()) ? 131071 : 524287);
    if (isSetBatchCallBuilder())
      hashCode = hashCode * 8191 + batchCallBuilder.hashCode();

    hashCode = hashCode * 8191 + ((isSetSqlBuilders()) ? 131071 : 524287);
    if (isSetSqlBuilders())
      hashCode = hashCode * 8191 + sqlBuilders.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sendTime);

    hashCode = hashCode * 8191 + ((isSetReceiveTime()) ? 131071 : 524287);
    if (isSetReceiveTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receiveTime);

    return hashCode;
  }

  @Override
  public int compareTo(DasRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLogicDbName()).compareTo(other.isSetLogicDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogicDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicDbName, other.logicDbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDasClientVersion()).compareTo(other.isSetDasClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDasClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dasClientVersion, other.dasClientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPpdaiClientVersion()).compareTo(other.isSetPpdaiClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPpdaiClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ppdaiClientVersion, other.ppdaiClientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransactionId()).compareTo(other.isSetTransactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, other.transactionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHints()).compareTo(other.isSetHints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hints, other.hints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntityList()).compareTo(other.isSetEntityList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityList, other.entityList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCallBuilder()).compareTo(other.isSetCallBuilder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallBuilder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callBuilder, other.callBuilder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatchUpdateBuilder()).compareTo(other.isSetBatchUpdateBuilder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchUpdateBuilder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchUpdateBuilder, other.batchUpdateBuilder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatchCallBuilder()).compareTo(other.isSetBatchCallBuilder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchCallBuilder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchCallBuilder, other.batchCallBuilder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSqlBuilders()).compareTo(other.isSetSqlBuilders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlBuilders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlBuilders, other.sqlBuilders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceiveTime()).compareTo(other.isSetReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTime, other.receiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DasRequest(");
    boolean first = true;

    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logicDbName:");
    if (this.logicDbName == null) {
      sb.append("null");
    } else {
      sb.append(this.logicDbName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dasClientVersion:");
    if (this.dasClientVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.dasClientVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ppdaiClientVersion:");
    if (this.ppdaiClientVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.ppdaiClientVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (isSetTransactionId()) {
      if (!first) sb.append(", ");
      sb.append("transactionId:");
      if (this.transactionId == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionId);
      }
      first = false;
    }
    if (isSetHints()) {
      if (!first) sb.append(", ");
      sb.append("hints:");
      if (this.hints == null) {
        sb.append("null");
      } else {
        sb.append(this.hints);
      }
      first = false;
    }
    if (isSetEntityList()) {
      if (!first) sb.append(", ");
      sb.append("entityList:");
      if (this.entityList == null) {
        sb.append("null");
      } else {
        sb.append(this.entityList);
      }
      first = false;
    }
    if (isSetCallBuilder()) {
      if (!first) sb.append(", ");
      sb.append("callBuilder:");
      if (this.callBuilder == null) {
        sb.append("null");
      } else {
        sb.append(this.callBuilder);
      }
      first = false;
    }
    if (isSetBatchUpdateBuilder()) {
      if (!first) sb.append(", ");
      sb.append("batchUpdateBuilder:");
      if (this.batchUpdateBuilder == null) {
        sb.append("null");
      } else {
        sb.append(this.batchUpdateBuilder);
      }
      first = false;
    }
    if (isSetBatchCallBuilder()) {
      if (!first) sb.append(", ");
      sb.append("batchCallBuilder:");
      if (this.batchCallBuilder == null) {
        sb.append("null");
      } else {
        sb.append(this.batchCallBuilder);
      }
      first = false;
    }
    if (isSetSqlBuilders()) {
      if (!first) sb.append(", ");
      sb.append("sqlBuilders:");
      if (this.sqlBuilders == null) {
        sb.append("null");
      } else {
        sb.append(this.sqlBuilders);
      }
      first = false;
    }
    if (isSetTraceId()) {
      if (!first) sb.append(", ");
      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sendTime:");
    sb.append(this.sendTime);
    first = false;
    if (isSetReceiveTime()) {
      if (!first) sb.append(", ");
      sb.append("receiveTime:");
      sb.append(this.receiveTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (appId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appId' was not present! Struct: " + toString());
    }
    if (logicDbName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'logicDbName' was not present! Struct: " + toString());
    }
    if (dasClientVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dasClientVersion' was not present! Struct: " + toString());
    }
    if (ppdaiClientVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ppdaiClientVersion' was not present! Struct: " + toString());
    }
    if (operation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'operation' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sendTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (transactionId != null) {
      transactionId.validate();
    }
    if (hints != null) {
      hints.validate();
    }
    if (entityList != null) {
      entityList.validate();
    }
    if (callBuilder != null) {
      callBuilder.validate();
    }
    if (batchUpdateBuilder != null) {
      batchUpdateBuilder.validate();
    }
    if (batchCallBuilder != null) {
      batchCallBuilder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DasRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DasRequestStandardScheme getScheme() {
      return new DasRequestStandardScheme();
    }
  }

  private static class DasRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<DasRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DasRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIC_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logicDbName = iprot.readString();
              struct.setLogicDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DAS_CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dasClientVersion = iprot.readString();
              struct.setDasClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PPDAI_CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ppdaiClientVersion = iprot.readString();
              struct.setPpdaiClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operation = com.ppdai.das.service.DasOperation.findByValue(iprot.readI32());
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transactionId = new DasTransactionId();
              struct.transactionId.read(iprot);
              struct.setTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hints = new DasHints();
              struct.hints.read(iprot);
              struct.setHintsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENTITY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entityList = new EntityList();
              struct.entityList.read(iprot);
              struct.setEntityListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CALL_BUILDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callBuilder = new DasCallBuilder();
              struct.callBuilder.read(iprot);
              struct.setCallBuilderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BATCH_UPDATE_BUILDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.batchUpdateBuilder = new DasBatchUpdateBuilder();
              struct.batchUpdateBuilder.read(iprot);
              struct.setBatchUpdateBuilderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BATCH_CALL_BUILDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.batchCallBuilder = new DasBatchCallBuilder();
              struct.batchCallBuilder.read(iprot);
              struct.setBatchCallBuilderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SQL_BUILDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                struct.sqlBuilders = new java.util.ArrayList<DasSqlBuilder>(_list194.size);
                @org.apache.thrift.annotation.Nullable DasSqlBuilder _elem195;
                for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                {
                  _elem195 = new DasSqlBuilder();
                  _elem195.read(iprot);
                  struct.sqlBuilders.add(_elem195);
                }
                iprot.readListEnd();
              }
              struct.setSqlBuildersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.traceId = new DasTraceId();
              struct.traceId.read(iprot);
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendTime = iprot.readI64();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiveTime = iprot.readI64();
              struct.setReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSendTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sendTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DasRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.logicDbName != null) {
        oprot.writeFieldBegin(LOGIC_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.logicDbName);
        oprot.writeFieldEnd();
      }
      if (struct.dasClientVersion != null) {
        oprot.writeFieldBegin(DAS_CLIENT_VERSION_FIELD_DESC);
        oprot.writeString(struct.dasClientVersion);
        oprot.writeFieldEnd();
      }
      if (struct.ppdaiClientVersion != null) {
        oprot.writeFieldBegin(PPDAI_CLIENT_VERSION_FIELD_DESC);
        oprot.writeString(struct.ppdaiClientVersion);
        oprot.writeFieldEnd();
      }
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        oprot.writeI32(struct.operation.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.transactionId != null) {
        if (struct.isSetTransactionId()) {
          oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
          struct.transactionId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hints != null) {
        if (struct.isSetHints()) {
          oprot.writeFieldBegin(HINTS_FIELD_DESC);
          struct.hints.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entityList != null) {
        if (struct.isSetEntityList()) {
          oprot.writeFieldBegin(ENTITY_LIST_FIELD_DESC);
          struct.entityList.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callBuilder != null) {
        if (struct.isSetCallBuilder()) {
          oprot.writeFieldBegin(CALL_BUILDER_FIELD_DESC);
          struct.callBuilder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batchUpdateBuilder != null) {
        if (struct.isSetBatchUpdateBuilder()) {
          oprot.writeFieldBegin(BATCH_UPDATE_BUILDER_FIELD_DESC);
          struct.batchUpdateBuilder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batchCallBuilder != null) {
        if (struct.isSetBatchCallBuilder()) {
          oprot.writeFieldBegin(BATCH_CALL_BUILDER_FIELD_DESC);
          struct.batchCallBuilder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sqlBuilders != null) {
        if (struct.isSetSqlBuilders()) {
          oprot.writeFieldBegin(SQL_BUILDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sqlBuilders.size()));
            for (DasSqlBuilder _iter197 : struct.sqlBuilders)
            {
              _iter197.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceId != null) {
        if (struct.isSetTraceId()) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          struct.traceId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
      oprot.writeI64(struct.sendTime);
      oprot.writeFieldEnd();
      if (struct.isSetReceiveTime()) {
        oprot.writeFieldBegin(RECEIVE_TIME_FIELD_DESC);
        oprot.writeI64(struct.receiveTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DasRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DasRequestTupleScheme getScheme() {
      return new DasRequestTupleScheme();
    }
  }

  private static class DasRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<DasRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DasRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.appId);
      oprot.writeString(struct.logicDbName);
      oprot.writeString(struct.dasClientVersion);
      oprot.writeString(struct.ppdaiClientVersion);
      oprot.writeI32(struct.operation.getValue());
      oprot.writeI64(struct.sendTime);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTransactionId()) {
        optionals.set(0);
      }
      if (struct.isSetHints()) {
        optionals.set(1);
      }
      if (struct.isSetEntityList()) {
        optionals.set(2);
      }
      if (struct.isSetCallBuilder()) {
        optionals.set(3);
      }
      if (struct.isSetBatchUpdateBuilder()) {
        optionals.set(4);
      }
      if (struct.isSetBatchCallBuilder()) {
        optionals.set(5);
      }
      if (struct.isSetSqlBuilders()) {
        optionals.set(6);
      }
      if (struct.isSetTraceId()) {
        optionals.set(7);
      }
      if (struct.isSetReceiveTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTransactionId()) {
        struct.transactionId.write(oprot);
      }
      if (struct.isSetHints()) {
        struct.hints.write(oprot);
      }
      if (struct.isSetEntityList()) {
        struct.entityList.write(oprot);
      }
      if (struct.isSetCallBuilder()) {
        struct.callBuilder.write(oprot);
      }
      if (struct.isSetBatchUpdateBuilder()) {
        struct.batchUpdateBuilder.write(oprot);
      }
      if (struct.isSetBatchCallBuilder()) {
        struct.batchCallBuilder.write(oprot);
      }
      if (struct.isSetSqlBuilders()) {
        {
          oprot.writeI32(struct.sqlBuilders.size());
          for (DasSqlBuilder _iter198 : struct.sqlBuilders)
          {
            _iter198.write(oprot);
          }
        }
      }
      if (struct.isSetTraceId()) {
        struct.traceId.write(oprot);
      }
      if (struct.isSetReceiveTime()) {
        oprot.writeI64(struct.receiveTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DasRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.appId = iprot.readString();
      struct.setAppIdIsSet(true);
      struct.logicDbName = iprot.readString();
      struct.setLogicDbNameIsSet(true);
      struct.dasClientVersion = iprot.readString();
      struct.setDasClientVersionIsSet(true);
      struct.ppdaiClientVersion = iprot.readString();
      struct.setPpdaiClientVersionIsSet(true);
      struct.operation = com.ppdai.das.service.DasOperation.findByValue(iprot.readI32());
      struct.setOperationIsSet(true);
      struct.sendTime = iprot.readI64();
      struct.setSendTimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.transactionId = new DasTransactionId();
        struct.transactionId.read(iprot);
        struct.setTransactionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hints = new DasHints();
        struct.hints.read(iprot);
        struct.setHintsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entityList = new EntityList();
        struct.entityList.read(iprot);
        struct.setEntityListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.callBuilder = new DasCallBuilder();
        struct.callBuilder.read(iprot);
        struct.setCallBuilderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.batchUpdateBuilder = new DasBatchUpdateBuilder();
        struct.batchUpdateBuilder.read(iprot);
        struct.setBatchUpdateBuilderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.batchCallBuilder = new DasBatchCallBuilder();
        struct.batchCallBuilder.read(iprot);
        struct.setBatchCallBuilderIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sqlBuilders = new java.util.ArrayList<DasSqlBuilder>(_list199.size);
          @org.apache.thrift.annotation.Nullable DasSqlBuilder _elem200;
          for (int _i201 = 0; _i201 < _list199.size; ++_i201)
          {
            _elem200 = new DasSqlBuilder();
            _elem200.read(iprot);
            struct.sqlBuilders.add(_elem200);
          }
        }
        struct.setSqlBuildersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.traceId = new DasTraceId();
        struct.traceId.read(iprot);
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.receiveTime = iprot.readI64();
        struct.setReceiveTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

