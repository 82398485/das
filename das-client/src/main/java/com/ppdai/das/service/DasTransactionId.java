/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ppdai.das.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-06-18")
public class DasTransactionId implements org.apache.thrift.TBase<DasTransactionId, DasTransactionId._Fields>, java.io.Serializable, Cloneable, Comparable<DasTransactionId> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DasTransactionId");

  private static final org.apache.thrift.protocol.TField LOGIC_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("logicDbName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("clientAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNumber", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PHYSICAL_DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("physicalDbName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ROLLED_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("rolledBack", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("completed", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DasTransactionIdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DasTransactionIdTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String logicDbName; // required
  public @org.apache.thrift.annotation.Nullable String clientAddress; // required
  public @org.apache.thrift.annotation.Nullable String serverAddress; // required
  public long createTime; // required
  public long sequenceNumber; // required
  public @org.apache.thrift.annotation.Nullable String physicalDbName; // required
  public @org.apache.thrift.annotation.Nullable String shardId; // optional
  public int level; // required
  public boolean rolledBack; // required
  public boolean completed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOGIC_DB_NAME((short)1, "logicDbName"),
    CLIENT_ADDRESS((short)2, "clientAddress"),
    SERVER_ADDRESS((short)3, "serverAddress"),
    CREATE_TIME((short)4, "createTime"),
    SEQUENCE_NUMBER((short)5, "sequenceNumber"),
    PHYSICAL_DB_NAME((short)6, "physicalDbName"),
    SHARD_ID((short)7, "shardId"),
    LEVEL((short)8, "level"),
    ROLLED_BACK((short)9, "rolledBack"),
    COMPLETED((short)10, "completed");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIC_DB_NAME
          return LOGIC_DB_NAME;
        case 2: // CLIENT_ADDRESS
          return CLIENT_ADDRESS;
        case 3: // SERVER_ADDRESS
          return SERVER_ADDRESS;
        case 4: // CREATE_TIME
          return CREATE_TIME;
        case 5: // SEQUENCE_NUMBER
          return SEQUENCE_NUMBER;
        case 6: // PHYSICAL_DB_NAME
          return PHYSICAL_DB_NAME;
        case 7: // SHARD_ID
          return SHARD_ID;
        case 8: // LEVEL
          return LEVEL;
        case 9: // ROLLED_BACK
          return ROLLED_BACK;
        case 10: // COMPLETED
          return COMPLETED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __SEQUENCENUMBER_ISSET_ID = 1;
  private static final int __LEVEL_ISSET_ID = 2;
  private static final int __ROLLEDBACK_ISSET_ID = 3;
  private static final int __COMPLETED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SHARD_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIC_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("logicDbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("clientAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("serverAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("sequenceNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PHYSICAL_DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("physicalDbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLLED_BACK, new org.apache.thrift.meta_data.FieldMetaData("rolledBack", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("completed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DasTransactionId.class, metaDataMap);
  }

  public DasTransactionId() {
  }

  public DasTransactionId(
    String logicDbName,
    String clientAddress,
    String serverAddress,
    long createTime,
    long sequenceNumber,
    String physicalDbName,
    int level,
    boolean rolledBack,
    boolean completed)
  {
    this();
    this.logicDbName = logicDbName;
    this.clientAddress = clientAddress;
    this.serverAddress = serverAddress;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    this.physicalDbName = physicalDbName;
    this.level = level;
    setLevelIsSet(true);
    this.rolledBack = rolledBack;
    setRolledBackIsSet(true);
    this.completed = completed;
    setCompletedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DasTransactionId(DasTransactionId other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLogicDbName()) {
      this.logicDbName = other.logicDbName;
    }
    if (other.isSetClientAddress()) {
      this.clientAddress = other.clientAddress;
    }
    if (other.isSetServerAddress()) {
      this.serverAddress = other.serverAddress;
    }
    this.createTime = other.createTime;
    this.sequenceNumber = other.sequenceNumber;
    if (other.isSetPhysicalDbName()) {
      this.physicalDbName = other.physicalDbName;
    }
    if (other.isSetShardId()) {
      this.shardId = other.shardId;
    }
    this.level = other.level;
    this.rolledBack = other.rolledBack;
    this.completed = other.completed;
  }

  public DasTransactionId deepCopy() {
    return new DasTransactionId(this);
  }

  @Override
  public void clear() {
    this.logicDbName = null;
    this.clientAddress = null;
    this.serverAddress = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setSequenceNumberIsSet(false);
    this.sequenceNumber = 0;
    this.physicalDbName = null;
    this.shardId = null;
    setLevelIsSet(false);
    this.level = 0;
    setRolledBackIsSet(false);
    this.rolledBack = false;
    setCompletedIsSet(false);
    this.completed = false;
  }

  @org.apache.thrift.annotation.Nullable
  public String getLogicDbName() {
    return this.logicDbName;
  }

  public DasTransactionId setLogicDbName(@org.apache.thrift.annotation.Nullable String logicDbName) {
    this.logicDbName = logicDbName;
    return this;
  }

  public void unsetLogicDbName() {
    this.logicDbName = null;
  }

  /** Returns true if field logicDbName is set (has been assigned a value) and false otherwise */
  public boolean isSetLogicDbName() {
    return this.logicDbName != null;
  }

  public void setLogicDbNameIsSet(boolean value) {
    if (!value) {
      this.logicDbName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getClientAddress() {
    return this.clientAddress;
  }

  public DasTransactionId setClientAddress(@org.apache.thrift.annotation.Nullable String clientAddress) {
    this.clientAddress = clientAddress;
    return this;
  }

  public void unsetClientAddress() {
    this.clientAddress = null;
  }

  /** Returns true if field clientAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetClientAddress() {
    return this.clientAddress != null;
  }

  public void setClientAddressIsSet(boolean value) {
    if (!value) {
      this.clientAddress = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getServerAddress() {
    return this.serverAddress;
  }

  public DasTransactionId setServerAddress(@org.apache.thrift.annotation.Nullable String serverAddress) {
    this.serverAddress = serverAddress;
    return this;
  }

  public void unsetServerAddress() {
    this.serverAddress = null;
  }

  /** Returns true if field serverAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetServerAddress() {
    return this.serverAddress != null;
  }

  public void setServerAddressIsSet(boolean value) {
    if (!value) {
      this.serverAddress = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public DasTransactionId setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getSequenceNumber() {
    return this.sequenceNumber;
  }

  public DasTransactionId setSequenceNumber(long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    setSequenceNumberIsSet(true);
    return this;
  }

  public void unsetSequenceNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  /** Returns true if field sequenceNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID);
  }

  public void setSequenceNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQUENCENUMBER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getPhysicalDbName() {
    return this.physicalDbName;
  }

  public DasTransactionId setPhysicalDbName(@org.apache.thrift.annotation.Nullable String physicalDbName) {
    this.physicalDbName = physicalDbName;
    return this;
  }

  public void unsetPhysicalDbName() {
    this.physicalDbName = null;
  }

  /** Returns true if field physicalDbName is set (has been assigned a value) and false otherwise */
  public boolean isSetPhysicalDbName() {
    return this.physicalDbName != null;
  }

  public void setPhysicalDbNameIsSet(boolean value) {
    if (!value) {
      this.physicalDbName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getShardId() {
    return this.shardId;
  }

  public DasTransactionId setShardId(@org.apache.thrift.annotation.Nullable String shardId) {
    this.shardId = shardId;
    return this;
  }

  public void unsetShardId() {
    this.shardId = null;
  }

  /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
  public boolean isSetShardId() {
    return this.shardId != null;
  }

  public void setShardIdIsSet(boolean value) {
    if (!value) {
      this.shardId = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public DasTransactionId setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public boolean isRolledBack() {
    return this.rolledBack;
  }

  public DasTransactionId setRolledBack(boolean rolledBack) {
    this.rolledBack = rolledBack;
    setRolledBackIsSet(true);
    return this;
  }

  public void unsetRolledBack() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLLEDBACK_ISSET_ID);
  }

  /** Returns true if field rolledBack is set (has been assigned a value) and false otherwise */
  public boolean isSetRolledBack() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLLEDBACK_ISSET_ID);
  }

  public void setRolledBackIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLLEDBACK_ISSET_ID, value);
  }

  public boolean isCompleted() {
    return this.completed;
  }

  public DasTransactionId setCompleted(boolean completed) {
    this.completed = completed;
    setCompletedIsSet(true);
    return this;
  }

  public void unsetCompleted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPLETED_ISSET_ID);
  }

  /** Returns true if field completed is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPLETED_ISSET_ID);
  }

  public void setCompletedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPLETED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case LOGIC_DB_NAME:
      if (value == null) {
        unsetLogicDbName();
      } else {
        setLogicDbName((String)value);
      }
      break;

    case CLIENT_ADDRESS:
      if (value == null) {
        unsetClientAddress();
      } else {
        setClientAddress((String)value);
      }
      break;

    case SERVER_ADDRESS:
      if (value == null) {
        unsetServerAddress();
      } else {
        setServerAddress((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case SEQUENCE_NUMBER:
      if (value == null) {
        unsetSequenceNumber();
      } else {
        setSequenceNumber((Long)value);
      }
      break;

    case PHYSICAL_DB_NAME:
      if (value == null) {
        unsetPhysicalDbName();
      } else {
        setPhysicalDbName((String)value);
      }
      break;

    case SHARD_ID:
      if (value == null) {
        unsetShardId();
      } else {
        setShardId((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case ROLLED_BACK:
      if (value == null) {
        unsetRolledBack();
      } else {
        setRolledBack((Boolean)value);
      }
      break;

    case COMPLETED:
      if (value == null) {
        unsetCompleted();
      } else {
        setCompleted((Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIC_DB_NAME:
      return getLogicDbName();

    case CLIENT_ADDRESS:
      return getClientAddress();

    case SERVER_ADDRESS:
      return getServerAddress();

    case CREATE_TIME:
      return getCreateTime();

    case SEQUENCE_NUMBER:
      return getSequenceNumber();

    case PHYSICAL_DB_NAME:
      return getPhysicalDbName();

    case SHARD_ID:
      return getShardId();

    case LEVEL:
      return getLevel();

    case ROLLED_BACK:
      return isRolledBack();

    case COMPLETED:
      return isCompleted();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIC_DB_NAME:
      return isSetLogicDbName();
    case CLIENT_ADDRESS:
      return isSetClientAddress();
    case SERVER_ADDRESS:
      return isSetServerAddress();
    case CREATE_TIME:
      return isSetCreateTime();
    case SEQUENCE_NUMBER:
      return isSetSequenceNumber();
    case PHYSICAL_DB_NAME:
      return isSetPhysicalDbName();
    case SHARD_ID:
      return isSetShardId();
    case LEVEL:
      return isSetLevel();
    case ROLLED_BACK:
      return isSetRolledBack();
    case COMPLETED:
      return isSetCompleted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DasTransactionId)
      return this.equals((DasTransactionId)that);
    return false;
  }

  public boolean equals(DasTransactionId that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_logicDbName = true && this.isSetLogicDbName();
    boolean that_present_logicDbName = true && that.isSetLogicDbName();
    if (this_present_logicDbName || that_present_logicDbName) {
      if (!(this_present_logicDbName && that_present_logicDbName))
        return false;
      if (!this.logicDbName.equals(that.logicDbName))
        return false;
    }

    boolean this_present_clientAddress = true && this.isSetClientAddress();
    boolean that_present_clientAddress = true && that.isSetClientAddress();
    if (this_present_clientAddress || that_present_clientAddress) {
      if (!(this_present_clientAddress && that_present_clientAddress))
        return false;
      if (!this.clientAddress.equals(that.clientAddress))
        return false;
    }

    boolean this_present_serverAddress = true && this.isSetServerAddress();
    boolean that_present_serverAddress = true && that.isSetServerAddress();
    if (this_present_serverAddress || that_present_serverAddress) {
      if (!(this_present_serverAddress && that_present_serverAddress))
        return false;
      if (!this.serverAddress.equals(that.serverAddress))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_sequenceNumber = true;
    boolean that_present_sequenceNumber = true;
    if (this_present_sequenceNumber || that_present_sequenceNumber) {
      if (!(this_present_sequenceNumber && that_present_sequenceNumber))
        return false;
      if (this.sequenceNumber != that.sequenceNumber)
        return false;
    }

    boolean this_present_physicalDbName = true && this.isSetPhysicalDbName();
    boolean that_present_physicalDbName = true && that.isSetPhysicalDbName();
    if (this_present_physicalDbName || that_present_physicalDbName) {
      if (!(this_present_physicalDbName && that_present_physicalDbName))
        return false;
      if (!this.physicalDbName.equals(that.physicalDbName))
        return false;
    }

    boolean this_present_shardId = true && this.isSetShardId();
    boolean that_present_shardId = true && that.isSetShardId();
    if (this_present_shardId || that_present_shardId) {
      if (!(this_present_shardId && that_present_shardId))
        return false;
      if (!this.shardId.equals(that.shardId))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_rolledBack = true;
    boolean that_present_rolledBack = true;
    if (this_present_rolledBack || that_present_rolledBack) {
      if (!(this_present_rolledBack && that_present_rolledBack))
        return false;
      if (this.rolledBack != that.rolledBack)
        return false;
    }

    boolean this_present_completed = true;
    boolean that_present_completed = true;
    if (this_present_completed || that_present_completed) {
      if (!(this_present_completed && that_present_completed))
        return false;
      if (this.completed != that.completed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLogicDbName()) ? 131071 : 524287);
    if (isSetLogicDbName())
      hashCode = hashCode * 8191 + logicDbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientAddress()) ? 131071 : 524287);
    if (isSetClientAddress())
      hashCode = hashCode * 8191 + clientAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerAddress()) ? 131071 : 524287);
    if (isSetServerAddress())
      hashCode = hashCode * 8191 + serverAddress.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sequenceNumber);

    hashCode = hashCode * 8191 + ((isSetPhysicalDbName()) ? 131071 : 524287);
    if (isSetPhysicalDbName())
      hashCode = hashCode * 8191 + physicalDbName.hashCode();

    hashCode = hashCode * 8191 + ((isSetShardId()) ? 131071 : 524287);
    if (isSetShardId())
      hashCode = hashCode * 8191 + shardId.hashCode();

    hashCode = hashCode * 8191 + level;

    hashCode = hashCode * 8191 + ((rolledBack) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((completed) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(DasTransactionId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLogicDbName()).compareTo(other.isSetLogicDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogicDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logicDbName, other.logicDbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientAddress()).compareTo(other.isSetClientAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientAddress, other.clientAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerAddress()).compareTo(other.isSetServerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverAddress, other.serverAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNumber()).compareTo(other.isSetSequenceNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNumber, other.sequenceNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhysicalDbName()).compareTo(other.isSetPhysicalDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhysicalDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.physicalDbName, other.physicalDbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRolledBack()).compareTo(other.isSetRolledBack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRolledBack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolledBack, other.rolledBack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleted()).compareTo(other.isSetCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completed, other.completed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DasTransactionId(");
    boolean first = true;

    sb.append("logicDbName:");
    if (this.logicDbName == null) {
      sb.append("null");
    } else {
      sb.append(this.logicDbName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientAddress:");
    if (this.clientAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.clientAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverAddress:");
    if (this.serverAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.serverAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequenceNumber:");
    sb.append(this.sequenceNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("physicalDbName:");
    if (this.physicalDbName == null) {
      sb.append("null");
    } else {
      sb.append(this.physicalDbName);
    }
    first = false;
    if (isSetShardId()) {
      if (!first) sb.append(", ");
      sb.append("shardId:");
      if (this.shardId == null) {
        sb.append("null");
      } else {
        sb.append(this.shardId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rolledBack:");
    sb.append(this.rolledBack);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completed:");
    sb.append(this.completed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (logicDbName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'logicDbName' was not present! Struct: " + toString());
    }
    if (clientAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientAddress' was not present! Struct: " + toString());
    }
    if (serverAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverAddress' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'createTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sequenceNumber' because it's a primitive and you chose the non-beans generator.
    if (physicalDbName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'physicalDbName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'level' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rolledBack' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'completed' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DasTransactionIdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DasTransactionIdStandardScheme getScheme() {
      return new DasTransactionIdStandardScheme();
    }
  }

  private static class DasTransactionIdStandardScheme extends org.apache.thrift.scheme.StandardScheme<DasTransactionId> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DasTransactionId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOGIC_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logicDbName = iprot.readString();
              struct.setLogicDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientAddress = iprot.readString();
              struct.setClientAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverAddress = iprot.readString();
              struct.setServerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEQUENCE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceNumber = iprot.readI64();
              struct.setSequenceNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHYSICAL_DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.physicalDbName = iprot.readString();
              struct.setPhysicalDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shardId = iprot.readString();
              struct.setShardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROLLED_BACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rolledBack = iprot.readBool();
              struct.setRolledBackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.completed = iprot.readBool();
              struct.setCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSequenceNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLevel()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'level' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRolledBack()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rolledBack' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompleted()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'completed' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DasTransactionId struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.logicDbName != null) {
        oprot.writeFieldBegin(LOGIC_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.logicDbName);
        oprot.writeFieldEnd();
      }
      if (struct.clientAddress != null) {
        oprot.writeFieldBegin(CLIENT_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.clientAddress);
        oprot.writeFieldEnd();
      }
      if (struct.serverAddress != null) {
        oprot.writeFieldBegin(SERVER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.serverAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQUENCE_NUMBER_FIELD_DESC);
      oprot.writeI64(struct.sequenceNumber);
      oprot.writeFieldEnd();
      if (struct.physicalDbName != null) {
        oprot.writeFieldBegin(PHYSICAL_DB_NAME_FIELD_DESC);
        oprot.writeString(struct.physicalDbName);
        oprot.writeFieldEnd();
      }
      if (struct.shardId != null) {
        if (struct.isSetShardId()) {
          oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
          oprot.writeString(struct.shardId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLLED_BACK_FIELD_DESC);
      oprot.writeBool(struct.rolledBack);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETED_FIELD_DESC);
      oprot.writeBool(struct.completed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DasTransactionIdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DasTransactionIdTupleScheme getScheme() {
      return new DasTransactionIdTupleScheme();
    }
  }

  private static class DasTransactionIdTupleScheme extends org.apache.thrift.scheme.TupleScheme<DasTransactionId> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DasTransactionId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.logicDbName);
      oprot.writeString(struct.clientAddress);
      oprot.writeString(struct.serverAddress);
      oprot.writeI64(struct.createTime);
      oprot.writeI64(struct.sequenceNumber);
      oprot.writeString(struct.physicalDbName);
      oprot.writeI32(struct.level);
      oprot.writeBool(struct.rolledBack);
      oprot.writeBool(struct.completed);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetShardId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetShardId()) {
        oprot.writeString(struct.shardId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DasTransactionId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.logicDbName = iprot.readString();
      struct.setLogicDbNameIsSet(true);
      struct.clientAddress = iprot.readString();
      struct.setClientAddressIsSet(true);
      struct.serverAddress = iprot.readString();
      struct.setServerAddressIsSet(true);
      struct.createTime = iprot.readI64();
      struct.setCreateTimeIsSet(true);
      struct.sequenceNumber = iprot.readI64();
      struct.setSequenceNumberIsSet(true);
      struct.physicalDbName = iprot.readString();
      struct.setPhysicalDbNameIsSet(true);
      struct.level = iprot.readI32();
      struct.setLevelIsSet(true);
      struct.rolledBack = iprot.readBool();
      struct.setRolledBackIsSet(true);
      struct.completed = iprot.readBool();
      struct.setCompletedIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.shardId = iprot.readString();
        struct.setShardIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

