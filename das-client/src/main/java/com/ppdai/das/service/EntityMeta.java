/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ppdai.das.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-07-02")
public class EntityMeta implements org.apache.thrift.TBase<EntityMeta, EntityMeta._Fields>, java.io.Serializable, Cloneable, Comparable<EntityMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EntityMeta");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField META_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("metaMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnTypes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryKeyNames", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField AUTO_INCREMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("autoIncremental", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("versionColumn", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATABLE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("updatableColumnNames", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField INSERTABLE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("insertableColumnNames", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FIELD_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldMap", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("identityField", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mapType", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EntityMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EntityMetaTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String tableName; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<String,ColumnMeta> metaMap; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<String> columnNames; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<String> columnTypes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<String> primaryKeyNames; // optional
  public boolean autoIncremental; // optional
  public @org.apache.thrift.annotation.Nullable String versionColumn; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<String> updatableColumnNames; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<String> insertableColumnNames; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> fieldMap; // optional
  public @org.apache.thrift.annotation.Nullable String identityField; // optional
  public boolean mapType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    META_MAP((short)2, "metaMap"),
    COLUMN_NAMES((short)3, "columnNames"),
    COLUMN_TYPES((short)4, "columnTypes"),
    PRIMARY_KEY_NAMES((short)5, "primaryKeyNames"),
    AUTO_INCREMENTAL((short)6, "autoIncremental"),
    VERSION_COLUMN((short)7, "versionColumn"),
    UPDATABLE_COLUMN_NAMES((short)8, "updatableColumnNames"),
    INSERTABLE_COLUMN_NAMES((short)9, "insertableColumnNames"),
    FIELD_MAP((short)10, "fieldMap"),
    IDENTITY_FIELD((short)11, "identityField"),
    MAP_TYPE((short)12, "mapType");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // META_MAP
          return META_MAP;
        case 3: // COLUMN_NAMES
          return COLUMN_NAMES;
        case 4: // COLUMN_TYPES
          return COLUMN_TYPES;
        case 5: // PRIMARY_KEY_NAMES
          return PRIMARY_KEY_NAMES;
        case 6: // AUTO_INCREMENTAL
          return AUTO_INCREMENTAL;
        case 7: // VERSION_COLUMN
          return VERSION_COLUMN;
        case 8: // UPDATABLE_COLUMN_NAMES
          return UPDATABLE_COLUMN_NAMES;
        case 9: // INSERTABLE_COLUMN_NAMES
          return INSERTABLE_COLUMN_NAMES;
        case 10: // FIELD_MAP
          return FIELD_MAP;
        case 11: // IDENTITY_FIELD
          return IDENTITY_FIELD;
        case 12: // MAP_TYPE
          return MAP_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTOINCREMENTAL_ISSET_ID = 0;
  private static final int __MAPTYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_NAME,_Fields.META_MAP,_Fields.COLUMN_NAMES,_Fields.COLUMN_TYPES,_Fields.PRIMARY_KEY_NAMES,_Fields.AUTO_INCREMENTAL,_Fields.VERSION_COLUMN,_Fields.UPDATABLE_COLUMN_NAMES,_Fields.INSERTABLE_COLUMN_NAMES,_Fields.FIELD_MAP,_Fields.IDENTITY_FIELD,_Fields.MAP_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.META_MAP, new org.apache.thrift.meta_data.FieldMetaData("metaMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ColumnMeta"))));
    tmpMap.put(_Fields.COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("columnNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMN_TYPES, new org.apache.thrift.meta_data.FieldMetaData("columnTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRIMARY_KEY_NAMES, new org.apache.thrift.meta_data.FieldMetaData("primaryKeyNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUTO_INCREMENTAL, new org.apache.thrift.meta_data.FieldMetaData("autoIncremental", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VERSION_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("versionColumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATABLE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("updatableColumnNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INSERTABLE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("insertableColumnNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FIELD_MAP, new org.apache.thrift.meta_data.FieldMetaData("fieldMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IDENTITY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("identityField", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mapType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EntityMeta.class, metaDataMap);
  }

  public EntityMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EntityMeta(EntityMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetMetaMap()) {
      java.util.Map<String,ColumnMeta> __this__metaMap = new java.util.HashMap<String,ColumnMeta>(other.metaMap.size());
      for (java.util.Map.Entry<String, ColumnMeta> other_element : other.metaMap.entrySet()) {

        String other_element_key = other_element.getKey();
        ColumnMeta other_element_value = other_element.getValue();

        String __this__metaMap_copy_key = other_element_key;

        ColumnMeta __this__metaMap_copy_value = new ColumnMeta(other_element_value);

        __this__metaMap.put(__this__metaMap_copy_key, __this__metaMap_copy_value);
      }
      this.metaMap = __this__metaMap;
    }
    if (other.isSetColumnNames()) {
      java.util.List<String> __this__columnNames = new java.util.ArrayList<String>(other.columnNames);
      this.columnNames = __this__columnNames;
    }
    if (other.isSetColumnTypes()) {
      java.util.List<String> __this__columnTypes = new java.util.ArrayList<String>(other.columnTypes);
      this.columnTypes = __this__columnTypes;
    }
    if (other.isSetPrimaryKeyNames()) {
      java.util.List<String> __this__primaryKeyNames = new java.util.ArrayList<String>(other.primaryKeyNames);
      this.primaryKeyNames = __this__primaryKeyNames;
    }
    this.autoIncremental = other.autoIncremental;
    if (other.isSetVersionColumn()) {
      this.versionColumn = other.versionColumn;
    }
    if (other.isSetUpdatableColumnNames()) {
      java.util.List<String> __this__updatableColumnNames = new java.util.ArrayList<String>(other.updatableColumnNames);
      this.updatableColumnNames = __this__updatableColumnNames;
    }
    if (other.isSetInsertableColumnNames()) {
      java.util.List<String> __this__insertableColumnNames = new java.util.ArrayList<String>(other.insertableColumnNames);
      this.insertableColumnNames = __this__insertableColumnNames;
    }
    if (other.isSetFieldMap()) {
      java.util.Map<String, String> __this__fieldMap = new java.util.HashMap<String, String>(other.fieldMap);
      this.fieldMap = __this__fieldMap;
    }
    if (other.isSetIdentityField()) {
      this.identityField = other.identityField;
    }
    this.mapType = other.mapType;
  }

  public EntityMeta deepCopy() {
    return new EntityMeta(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.metaMap = null;
    this.columnNames = null;
    this.columnTypes = null;
    this.primaryKeyNames = null;
    setAutoIncrementalIsSet(false);
    this.autoIncremental = false;
    this.versionColumn = null;
    this.updatableColumnNames = null;
    this.insertableColumnNames = null;
    this.fieldMap = null;
    this.identityField = null;
    setMapTypeIsSet(false);
    this.mapType = false;
  }

  @org.apache.thrift.annotation.Nullable
  public String getTableName() {
    return this.tableName;
  }

  public EntityMeta setTableName(@org.apache.thrift.annotation.Nullable String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public int getMetaMapSize() {
    return (this.metaMap == null) ? 0 : this.metaMap.size();
  }

  public void putToMetaMap(String key, ColumnMeta val) {
    if (this.metaMap == null) {
      this.metaMap = new java.util.HashMap<String,ColumnMeta>();
    }
    this.metaMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String,ColumnMeta> getMetaMap() {
    return this.metaMap;
  }

  public EntityMeta setMetaMap(@org.apache.thrift.annotation.Nullable java.util.Map<String,ColumnMeta> metaMap) {
    this.metaMap = metaMap;
    return this;
  }

  public void unsetMetaMap() {
    this.metaMap = null;
  }

  /** Returns true if field metaMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaMap() {
    return this.metaMap != null;
  }

  public void setMetaMapIsSet(boolean value) {
    if (!value) {
      this.metaMap = null;
    }
  }

  public int getColumnNamesSize() {
    return (this.columnNames == null) ? 0 : this.columnNames.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getColumnNamesIterator() {
    return (this.columnNames == null) ? null : this.columnNames.iterator();
  }

  public void addToColumnNames(String elem) {
    if (this.columnNames == null) {
      this.columnNames = new java.util.ArrayList<String>();
    }
    this.columnNames.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getColumnNames() {
    return this.columnNames;
  }

  public EntityMeta setColumnNames(@org.apache.thrift.annotation.Nullable java.util.List<String> columnNames) {
    this.columnNames = columnNames;
    return this;
  }

  public void unsetColumnNames() {
    this.columnNames = null;
  }

  /** Returns true if field columnNames is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnNames() {
    return this.columnNames != null;
  }

  public void setColumnNamesIsSet(boolean value) {
    if (!value) {
      this.columnNames = null;
    }
  }

  public int getColumnTypesSize() {
    return (this.columnTypes == null) ? 0 : this.columnTypes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getColumnTypesIterator() {
    return (this.columnTypes == null) ? null : this.columnTypes.iterator();
  }

  public void addToColumnTypes(String elem) {
    if (this.columnTypes == null) {
      this.columnTypes = new java.util.ArrayList<String>();
    }
    this.columnTypes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getColumnTypes() {
    return this.columnTypes;
  }

  public EntityMeta setColumnTypes(@org.apache.thrift.annotation.Nullable java.util.List<String> columnTypes) {
    this.columnTypes = columnTypes;
    return this;
  }

  public void unsetColumnTypes() {
    this.columnTypes = null;
  }

  /** Returns true if field columnTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnTypes() {
    return this.columnTypes != null;
  }

  public void setColumnTypesIsSet(boolean value) {
    if (!value) {
      this.columnTypes = null;
    }
  }

  public int getPrimaryKeyNamesSize() {
    return (this.primaryKeyNames == null) ? 0 : this.primaryKeyNames.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getPrimaryKeyNamesIterator() {
    return (this.primaryKeyNames == null) ? null : this.primaryKeyNames.iterator();
  }

  public void addToPrimaryKeyNames(String elem) {
    if (this.primaryKeyNames == null) {
      this.primaryKeyNames = new java.util.ArrayList<String>();
    }
    this.primaryKeyNames.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getPrimaryKeyNames() {
    return this.primaryKeyNames;
  }

  public EntityMeta setPrimaryKeyNames(@org.apache.thrift.annotation.Nullable java.util.List<String> primaryKeyNames) {
    this.primaryKeyNames = primaryKeyNames;
    return this;
  }

  public void unsetPrimaryKeyNames() {
    this.primaryKeyNames = null;
  }

  /** Returns true if field primaryKeyNames is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryKeyNames() {
    return this.primaryKeyNames != null;
  }

  public void setPrimaryKeyNamesIsSet(boolean value) {
    if (!value) {
      this.primaryKeyNames = null;
    }
  }

  public boolean isAutoIncremental() {
    return this.autoIncremental;
  }

  public EntityMeta setAutoIncremental(boolean autoIncremental) {
    this.autoIncremental = autoIncremental;
    setAutoIncrementalIsSet(true);
    return this;
  }

  public void unsetAutoIncremental() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOINCREMENTAL_ISSET_ID);
  }

  /** Returns true if field autoIncremental is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoIncremental() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOINCREMENTAL_ISSET_ID);
  }

  public void setAutoIncrementalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOINCREMENTAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getVersionColumn() {
    return this.versionColumn;
  }

  public EntityMeta setVersionColumn(@org.apache.thrift.annotation.Nullable String versionColumn) {
    this.versionColumn = versionColumn;
    return this;
  }

  public void unsetVersionColumn() {
    this.versionColumn = null;
  }

  /** Returns true if field versionColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionColumn() {
    return this.versionColumn != null;
  }

  public void setVersionColumnIsSet(boolean value) {
    if (!value) {
      this.versionColumn = null;
    }
  }

  public int getUpdatableColumnNamesSize() {
    return (this.updatableColumnNames == null) ? 0 : this.updatableColumnNames.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getUpdatableColumnNamesIterator() {
    return (this.updatableColumnNames == null) ? null : this.updatableColumnNames.iterator();
  }

  public void addToUpdatableColumnNames(String elem) {
    if (this.updatableColumnNames == null) {
      this.updatableColumnNames = new java.util.ArrayList<String>();
    }
    this.updatableColumnNames.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getUpdatableColumnNames() {
    return this.updatableColumnNames;
  }

  public EntityMeta setUpdatableColumnNames(@org.apache.thrift.annotation.Nullable java.util.List<String> updatableColumnNames) {
    this.updatableColumnNames = updatableColumnNames;
    return this;
  }

  public void unsetUpdatableColumnNames() {
    this.updatableColumnNames = null;
  }

  /** Returns true if field updatableColumnNames is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatableColumnNames() {
    return this.updatableColumnNames != null;
  }

  public void setUpdatableColumnNamesIsSet(boolean value) {
    if (!value) {
      this.updatableColumnNames = null;
    }
  }

  public int getInsertableColumnNamesSize() {
    return (this.insertableColumnNames == null) ? 0 : this.insertableColumnNames.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getInsertableColumnNamesIterator() {
    return (this.insertableColumnNames == null) ? null : this.insertableColumnNames.iterator();
  }

  public void addToInsertableColumnNames(String elem) {
    if (this.insertableColumnNames == null) {
      this.insertableColumnNames = new java.util.ArrayList<String>();
    }
    this.insertableColumnNames.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getInsertableColumnNames() {
    return this.insertableColumnNames;
  }

  public EntityMeta setInsertableColumnNames(@org.apache.thrift.annotation.Nullable java.util.List<String> insertableColumnNames) {
    this.insertableColumnNames = insertableColumnNames;
    return this;
  }

  public void unsetInsertableColumnNames() {
    this.insertableColumnNames = null;
  }

  /** Returns true if field insertableColumnNames is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertableColumnNames() {
    return this.insertableColumnNames != null;
  }

  public void setInsertableColumnNamesIsSet(boolean value) {
    if (!value) {
      this.insertableColumnNames = null;
    }
  }

  public int getFieldMapSize() {
    return (this.fieldMap == null) ? 0 : this.fieldMap.size();
  }

  public void putToFieldMap(String key, String val) {
    if (this.fieldMap == null) {
      this.fieldMap = new java.util.HashMap<String, String>();
    }
    this.fieldMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String, String> getFieldMap() {
    return this.fieldMap;
  }

  public EntityMeta setFieldMap(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> fieldMap) {
    this.fieldMap = fieldMap;
    return this;
  }

  public void unsetFieldMap() {
    this.fieldMap = null;
  }

  /** Returns true if field fieldMap is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldMap() {
    return this.fieldMap != null;
  }

  public void setFieldMapIsSet(boolean value) {
    if (!value) {
      this.fieldMap = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getIdentityField() {
    return this.identityField;
  }

  public EntityMeta setIdentityField(@org.apache.thrift.annotation.Nullable String identityField) {
    this.identityField = identityField;
    return this;
  }

  public void unsetIdentityField() {
    this.identityField = null;
  }

  /** Returns true if field identityField is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityField() {
    return this.identityField != null;
  }

  public void setIdentityFieldIsSet(boolean value) {
    if (!value) {
      this.identityField = null;
    }
  }

  public boolean isMapType() {
    return this.mapType;
  }

  public EntityMeta setMapType(boolean mapType) {
    this.mapType = mapType;
    setMapTypeIsSet(true);
    return this;
  }

  public void unsetMapType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAPTYPE_ISSET_ID);
  }

  /** Returns true if field mapType is set (has been assigned a value) and false otherwise */
  public boolean isSetMapType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAPTYPE_ISSET_ID);
  }

  public void setMapTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAPTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case META_MAP:
      if (value == null) {
        unsetMetaMap();
      } else {
        setMetaMap((java.util.Map<String,ColumnMeta>)value);
      }
      break;

    case COLUMN_NAMES:
      if (value == null) {
        unsetColumnNames();
      } else {
        setColumnNames((java.util.List<String>)value);
      }
      break;

    case COLUMN_TYPES:
      if (value == null) {
        unsetColumnTypes();
      } else {
        setColumnTypes((java.util.List<String>)value);
      }
      break;

    case PRIMARY_KEY_NAMES:
      if (value == null) {
        unsetPrimaryKeyNames();
      } else {
        setPrimaryKeyNames((java.util.List<String>)value);
      }
      break;

    case AUTO_INCREMENTAL:
      if (value == null) {
        unsetAutoIncremental();
      } else {
        setAutoIncremental((Boolean)value);
      }
      break;

    case VERSION_COLUMN:
      if (value == null) {
        unsetVersionColumn();
      } else {
        setVersionColumn((String)value);
      }
      break;

    case UPDATABLE_COLUMN_NAMES:
      if (value == null) {
        unsetUpdatableColumnNames();
      } else {
        setUpdatableColumnNames((java.util.List<String>)value);
      }
      break;

    case INSERTABLE_COLUMN_NAMES:
      if (value == null) {
        unsetInsertableColumnNames();
      } else {
        setInsertableColumnNames((java.util.List<String>)value);
      }
      break;

    case FIELD_MAP:
      if (value == null) {
        unsetFieldMap();
      } else {
        setFieldMap((java.util.Map<String, String>)value);
      }
      break;

    case IDENTITY_FIELD:
      if (value == null) {
        unsetIdentityField();
      } else {
        setIdentityField((String)value);
      }
      break;

    case MAP_TYPE:
      if (value == null) {
        unsetMapType();
      } else {
        setMapType((Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case META_MAP:
      return getMetaMap();

    case COLUMN_NAMES:
      return getColumnNames();

    case COLUMN_TYPES:
      return getColumnTypes();

    case PRIMARY_KEY_NAMES:
      return getPrimaryKeyNames();

    case AUTO_INCREMENTAL:
      return isAutoIncremental();

    case VERSION_COLUMN:
      return getVersionColumn();

    case UPDATABLE_COLUMN_NAMES:
      return getUpdatableColumnNames();

    case INSERTABLE_COLUMN_NAMES:
      return getInsertableColumnNames();

    case FIELD_MAP:
      return getFieldMap();

    case IDENTITY_FIELD:
      return getIdentityField();

    case MAP_TYPE:
      return isMapType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case META_MAP:
      return isSetMetaMap();
    case COLUMN_NAMES:
      return isSetColumnNames();
    case COLUMN_TYPES:
      return isSetColumnTypes();
    case PRIMARY_KEY_NAMES:
      return isSetPrimaryKeyNames();
    case AUTO_INCREMENTAL:
      return isSetAutoIncremental();
    case VERSION_COLUMN:
      return isSetVersionColumn();
    case UPDATABLE_COLUMN_NAMES:
      return isSetUpdatableColumnNames();
    case INSERTABLE_COLUMN_NAMES:
      return isSetInsertableColumnNames();
    case FIELD_MAP:
      return isSetFieldMap();
    case IDENTITY_FIELD:
      return isSetIdentityField();
    case MAP_TYPE:
      return isSetMapType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EntityMeta)
      return this.equals((EntityMeta)that);
    return false;
  }

  public boolean equals(EntityMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_metaMap = true && this.isSetMetaMap();
    boolean that_present_metaMap = true && that.isSetMetaMap();
    if (this_present_metaMap || that_present_metaMap) {
      if (!(this_present_metaMap && that_present_metaMap))
        return false;
      if (!this.metaMap.equals(that.metaMap))
        return false;
    }

    boolean this_present_columnNames = true && this.isSetColumnNames();
    boolean that_present_columnNames = true && that.isSetColumnNames();
    if (this_present_columnNames || that_present_columnNames) {
      if (!(this_present_columnNames && that_present_columnNames))
        return false;
      if (!this.columnNames.equals(that.columnNames))
        return false;
    }

    boolean this_present_columnTypes = true && this.isSetColumnTypes();
    boolean that_present_columnTypes = true && that.isSetColumnTypes();
    if (this_present_columnTypes || that_present_columnTypes) {
      if (!(this_present_columnTypes && that_present_columnTypes))
        return false;
      if (!this.columnTypes.equals(that.columnTypes))
        return false;
    }

    boolean this_present_primaryKeyNames = true && this.isSetPrimaryKeyNames();
    boolean that_present_primaryKeyNames = true && that.isSetPrimaryKeyNames();
    if (this_present_primaryKeyNames || that_present_primaryKeyNames) {
      if (!(this_present_primaryKeyNames && that_present_primaryKeyNames))
        return false;
      if (!this.primaryKeyNames.equals(that.primaryKeyNames))
        return false;
    }

    boolean this_present_autoIncremental = true && this.isSetAutoIncremental();
    boolean that_present_autoIncremental = true && that.isSetAutoIncremental();
    if (this_present_autoIncremental || that_present_autoIncremental) {
      if (!(this_present_autoIncremental && that_present_autoIncremental))
        return false;
      if (this.autoIncremental != that.autoIncremental)
        return false;
    }

    boolean this_present_versionColumn = true && this.isSetVersionColumn();
    boolean that_present_versionColumn = true && that.isSetVersionColumn();
    if (this_present_versionColumn || that_present_versionColumn) {
      if (!(this_present_versionColumn && that_present_versionColumn))
        return false;
      if (!this.versionColumn.equals(that.versionColumn))
        return false;
    }

    boolean this_present_updatableColumnNames = true && this.isSetUpdatableColumnNames();
    boolean that_present_updatableColumnNames = true && that.isSetUpdatableColumnNames();
    if (this_present_updatableColumnNames || that_present_updatableColumnNames) {
      if (!(this_present_updatableColumnNames && that_present_updatableColumnNames))
        return false;
      if (!this.updatableColumnNames.equals(that.updatableColumnNames))
        return false;
    }

    boolean this_present_insertableColumnNames = true && this.isSetInsertableColumnNames();
    boolean that_present_insertableColumnNames = true && that.isSetInsertableColumnNames();
    if (this_present_insertableColumnNames || that_present_insertableColumnNames) {
      if (!(this_present_insertableColumnNames && that_present_insertableColumnNames))
        return false;
      if (!this.insertableColumnNames.equals(that.insertableColumnNames))
        return false;
    }

    boolean this_present_fieldMap = true && this.isSetFieldMap();
    boolean that_present_fieldMap = true && that.isSetFieldMap();
    if (this_present_fieldMap || that_present_fieldMap) {
      if (!(this_present_fieldMap && that_present_fieldMap))
        return false;
      if (!this.fieldMap.equals(that.fieldMap))
        return false;
    }

    boolean this_present_identityField = true && this.isSetIdentityField();
    boolean that_present_identityField = true && that.isSetIdentityField();
    if (this_present_identityField || that_present_identityField) {
      if (!(this_present_identityField && that_present_identityField))
        return false;
      if (!this.identityField.equals(that.identityField))
        return false;
    }

    boolean this_present_mapType = true && this.isSetMapType();
    boolean that_present_mapType = true && that.isSetMapType();
    if (this_present_mapType || that_present_mapType) {
      if (!(this_present_mapType && that_present_mapType))
        return false;
      if (this.mapType != that.mapType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + tableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetaMap()) ? 131071 : 524287);
    if (isSetMetaMap())
      hashCode = hashCode * 8191 + metaMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnNames()) ? 131071 : 524287);
    if (isSetColumnNames())
      hashCode = hashCode * 8191 + columnNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnTypes()) ? 131071 : 524287);
    if (isSetColumnTypes())
      hashCode = hashCode * 8191 + columnTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrimaryKeyNames()) ? 131071 : 524287);
    if (isSetPrimaryKeyNames())
      hashCode = hashCode * 8191 + primaryKeyNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetAutoIncremental()) ? 131071 : 524287);
    if (isSetAutoIncremental())
      hashCode = hashCode * 8191 + ((autoIncremental) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetVersionColumn()) ? 131071 : 524287);
    if (isSetVersionColumn())
      hashCode = hashCode * 8191 + versionColumn.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatableColumnNames()) ? 131071 : 524287);
    if (isSetUpdatableColumnNames())
      hashCode = hashCode * 8191 + updatableColumnNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetInsertableColumnNames()) ? 131071 : 524287);
    if (isSetInsertableColumnNames())
      hashCode = hashCode * 8191 + insertableColumnNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetFieldMap()) ? 131071 : 524287);
    if (isSetFieldMap())
      hashCode = hashCode * 8191 + fieldMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentityField()) ? 131071 : 524287);
    if (isSetIdentityField())
      hashCode = hashCode * 8191 + identityField.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapType()) ? 131071 : 524287);
    if (isSetMapType())
      hashCode = hashCode * 8191 + ((mapType) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(EntityMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetaMap()).compareTo(other.isSetMetaMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaMap, other.metaMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnNames()).compareTo(other.isSetColumnNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNames, other.columnNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnTypes()).compareTo(other.isSetColumnTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnTypes, other.columnTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimaryKeyNames()).compareTo(other.isSetPrimaryKeyNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryKeyNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryKeyNames, other.primaryKeyNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoIncremental()).compareTo(other.isSetAutoIncremental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoIncremental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoIncremental, other.autoIncremental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionColumn()).compareTo(other.isSetVersionColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionColumn, other.versionColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatableColumnNames()).compareTo(other.isSetUpdatableColumnNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatableColumnNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatableColumnNames, other.updatableColumnNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertableColumnNames()).compareTo(other.isSetInsertableColumnNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertableColumnNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertableColumnNames, other.insertableColumnNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldMap()).compareTo(other.isSetFieldMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldMap, other.fieldMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityField()).compareTo(other.isSetIdentityField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityField, other.identityField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapType()).compareTo(other.isSetMapType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapType, other.mapType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EntityMeta(");
    boolean first = true;

    if (isSetTableName()) {
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
    }
    if (isSetMetaMap()) {
      if (!first) sb.append(", ");
      sb.append("metaMap:");
      if (this.metaMap == null) {
        sb.append("null");
      } else {
        sb.append(this.metaMap);
      }
      first = false;
    }
    if (isSetColumnNames()) {
      if (!first) sb.append(", ");
      sb.append("columnNames:");
      if (this.columnNames == null) {
        sb.append("null");
      } else {
        sb.append(this.columnNames);
      }
      first = false;
    }
    if (isSetColumnTypes()) {
      if (!first) sb.append(", ");
      sb.append("columnTypes:");
      if (this.columnTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.columnTypes);
      }
      first = false;
    }
    if (isSetPrimaryKeyNames()) {
      if (!first) sb.append(", ");
      sb.append("primaryKeyNames:");
      if (this.primaryKeyNames == null) {
        sb.append("null");
      } else {
        sb.append(this.primaryKeyNames);
      }
      first = false;
    }
    if (isSetAutoIncremental()) {
      if (!first) sb.append(", ");
      sb.append("autoIncremental:");
      sb.append(this.autoIncremental);
      first = false;
    }
    if (isSetVersionColumn()) {
      if (!first) sb.append(", ");
      sb.append("versionColumn:");
      if (this.versionColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.versionColumn);
      }
      first = false;
    }
    if (isSetUpdatableColumnNames()) {
      if (!first) sb.append(", ");
      sb.append("updatableColumnNames:");
      if (this.updatableColumnNames == null) {
        sb.append("null");
      } else {
        sb.append(this.updatableColumnNames);
      }
      first = false;
    }
    if (isSetInsertableColumnNames()) {
      if (!first) sb.append(", ");
      sb.append("insertableColumnNames:");
      if (this.insertableColumnNames == null) {
        sb.append("null");
      } else {
        sb.append(this.insertableColumnNames);
      }
      first = false;
    }
    if (isSetFieldMap()) {
      if (!first) sb.append(", ");
      sb.append("fieldMap:");
      if (this.fieldMap == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldMap);
      }
      first = false;
    }
    if (isSetIdentityField()) {
      if (!first) sb.append(", ");
      sb.append("identityField:");
      if (this.identityField == null) {
        sb.append("null");
      } else {
        sb.append(this.identityField);
      }
      first = false;
    }
    if (isSetMapType()) {
      if (!first) sb.append(", ");
      sb.append("mapType:");
      sb.append(this.mapType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntityMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntityMetaStandardScheme getScheme() {
      return new EntityMetaStandardScheme();
    }
  }

  private static class EntityMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<EntityMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EntityMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // META_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.metaMap = new java.util.HashMap<String,ColumnMeta>(2*_map16.size);
                @org.apache.thrift.annotation.Nullable String _key17;
                @org.apache.thrift.annotation.Nullable ColumnMeta _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  _val18 = new ColumnMeta();
                  _val18.read(iprot);
                  struct.metaMap.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setMetaMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.columnNames = new java.util.ArrayList<String>(_list20.size);
                @org.apache.thrift.annotation.Nullable String _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = iprot.readString();
                  struct.columnNames.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setColumnNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.columnTypes = new java.util.ArrayList<String>(_list23.size);
                @org.apache.thrift.annotation.Nullable String _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readString();
                  struct.columnTypes.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setColumnTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIMARY_KEY_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.primaryKeyNames = new java.util.ArrayList<String>(_list26.size);
                @org.apache.thrift.annotation.Nullable String _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readString();
                  struct.primaryKeyNames.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setPrimaryKeyNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTO_INCREMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoIncremental = iprot.readBool();
              struct.setAutoIncrementalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionColumn = iprot.readString();
              struct.setVersionColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATABLE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.updatableColumnNames = new java.util.ArrayList<String>(_list29.size);
                @org.apache.thrift.annotation.Nullable String _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = iprot.readString();
                  struct.updatableColumnNames.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setUpdatableColumnNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSERTABLE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.insertableColumnNames = new java.util.ArrayList<String>(_list32.size);
                @org.apache.thrift.annotation.Nullable String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.insertableColumnNames.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setInsertableColumnNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FIELD_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                struct.fieldMap = new java.util.HashMap<String, String>(2*_map35.size);
                @org.apache.thrift.annotation.Nullable String _key36;
                @org.apache.thrift.annotation.Nullable String _val37;
                for (int _i38 = 0; _i38 < _map35.size; ++_i38)
                {
                  _key36 = iprot.readString();
                  _val37 = iprot.readString();
                  struct.fieldMap.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setFieldMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IDENTITY_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityField = iprot.readString();
              struct.setIdentityFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mapType = iprot.readBool();
              struct.setMapTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EntityMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metaMap != null) {
        if (struct.isSetMetaMap()) {
          oprot.writeFieldBegin(META_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.metaMap.size()));
            for (java.util.Map.Entry<String, ColumnMeta> _iter39 : struct.metaMap.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              _iter39.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnNames != null) {
        if (struct.isSetColumnNames()) {
          oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnNames.size()));
            for (String _iter40 : struct.columnNames)
            {
              oprot.writeString(_iter40);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnTypes != null) {
        if (struct.isSetColumnTypes()) {
          oprot.writeFieldBegin(COLUMN_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnTypes.size()));
            for (String _iter41 : struct.columnTypes)
            {
              oprot.writeString(_iter41);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.primaryKeyNames != null) {
        if (struct.isSetPrimaryKeyNames()) {
          oprot.writeFieldBegin(PRIMARY_KEY_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.primaryKeyNames.size()));
            for (String _iter42 : struct.primaryKeyNames)
            {
              oprot.writeString(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAutoIncremental()) {
        oprot.writeFieldBegin(AUTO_INCREMENTAL_FIELD_DESC);
        oprot.writeBool(struct.autoIncremental);
        oprot.writeFieldEnd();
      }
      if (struct.versionColumn != null) {
        if (struct.isSetVersionColumn()) {
          oprot.writeFieldBegin(VERSION_COLUMN_FIELD_DESC);
          oprot.writeString(struct.versionColumn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updatableColumnNames != null) {
        if (struct.isSetUpdatableColumnNames()) {
          oprot.writeFieldBegin(UPDATABLE_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.updatableColumnNames.size()));
            for (String _iter43 : struct.updatableColumnNames)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.insertableColumnNames != null) {
        if (struct.isSetInsertableColumnNames()) {
          oprot.writeFieldBegin(INSERTABLE_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.insertableColumnNames.size()));
            for (String _iter44 : struct.insertableColumnNames)
            {
              oprot.writeString(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldMap != null) {
        if (struct.isSetFieldMap()) {
          oprot.writeFieldBegin(FIELD_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.fieldMap.size()));
            for (java.util.Map.Entry<String, String> _iter45 : struct.fieldMap.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.identityField != null) {
        if (struct.isSetIdentityField()) {
          oprot.writeFieldBegin(IDENTITY_FIELD_FIELD_DESC);
          oprot.writeString(struct.identityField);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMapType()) {
        oprot.writeFieldBegin(MAP_TYPE_FIELD_DESC);
        oprot.writeBool(struct.mapType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntityMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntityMetaTupleScheme getScheme() {
      return new EntityMetaTupleScheme();
    }
  }

  private static class EntityMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<EntityMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EntityMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTableName()) {
        optionals.set(0);
      }
      if (struct.isSetMetaMap()) {
        optionals.set(1);
      }
      if (struct.isSetColumnNames()) {
        optionals.set(2);
      }
      if (struct.isSetColumnTypes()) {
        optionals.set(3);
      }
      if (struct.isSetPrimaryKeyNames()) {
        optionals.set(4);
      }
      if (struct.isSetAutoIncremental()) {
        optionals.set(5);
      }
      if (struct.isSetVersionColumn()) {
        optionals.set(6);
      }
      if (struct.isSetUpdatableColumnNames()) {
        optionals.set(7);
      }
      if (struct.isSetInsertableColumnNames()) {
        optionals.set(8);
      }
      if (struct.isSetFieldMap()) {
        optionals.set(9);
      }
      if (struct.isSetIdentityField()) {
        optionals.set(10);
      }
      if (struct.isSetMapType()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetMetaMap()) {
        {
          oprot.writeI32(struct.metaMap.size());
          for (java.util.Map.Entry<String, ColumnMeta> _iter46 : struct.metaMap.entrySet())
          {
            oprot.writeString(_iter46.getKey());
            _iter46.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetColumnNames()) {
        {
          oprot.writeI32(struct.columnNames.size());
          for (String _iter47 : struct.columnNames)
          {
            oprot.writeString(_iter47);
          }
        }
      }
      if (struct.isSetColumnTypes()) {
        {
          oprot.writeI32(struct.columnTypes.size());
          for (String _iter48 : struct.columnTypes)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetPrimaryKeyNames()) {
        {
          oprot.writeI32(struct.primaryKeyNames.size());
          for (String _iter49 : struct.primaryKeyNames)
          {
            oprot.writeString(_iter49);
          }
        }
      }
      if (struct.isSetAutoIncremental()) {
        oprot.writeBool(struct.autoIncremental);
      }
      if (struct.isSetVersionColumn()) {
        oprot.writeString(struct.versionColumn);
      }
      if (struct.isSetUpdatableColumnNames()) {
        {
          oprot.writeI32(struct.updatableColumnNames.size());
          for (String _iter50 : struct.updatableColumnNames)
          {
            oprot.writeString(_iter50);
          }
        }
      }
      if (struct.isSetInsertableColumnNames()) {
        {
          oprot.writeI32(struct.insertableColumnNames.size());
          for (String _iter51 : struct.insertableColumnNames)
          {
            oprot.writeString(_iter51);
          }
        }
      }
      if (struct.isSetFieldMap()) {
        {
          oprot.writeI32(struct.fieldMap.size());
          for (java.util.Map.Entry<String, String> _iter52 : struct.fieldMap.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            oprot.writeString(_iter52.getValue());
          }
        }
      }
      if (struct.isSetIdentityField()) {
        oprot.writeString(struct.identityField);
      }
      if (struct.isSetMapType()) {
        oprot.writeBool(struct.mapType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EntityMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.metaMap = new java.util.HashMap<String,ColumnMeta>(2*_map53.size);
          @org.apache.thrift.annotation.Nullable String _key54;
          @org.apache.thrift.annotation.Nullable ColumnMeta _val55;
          for (int _i56 = 0; _i56 < _map53.size; ++_i56)
          {
            _key54 = iprot.readString();
            _val55 = new ColumnMeta();
            _val55.read(iprot);
            struct.metaMap.put(_key54, _val55);
          }
        }
        struct.setMetaMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.columnNames = new java.util.ArrayList<String>(_list57.size);
          @org.apache.thrift.annotation.Nullable String _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = iprot.readString();
            struct.columnNames.add(_elem58);
          }
        }
        struct.setColumnNamesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.columnTypes = new java.util.ArrayList<String>(_list60.size);
          @org.apache.thrift.annotation.Nullable String _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = iprot.readString();
            struct.columnTypes.add(_elem61);
          }
        }
        struct.setColumnTypesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.primaryKeyNames = new java.util.ArrayList<String>(_list63.size);
          @org.apache.thrift.annotation.Nullable String _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = iprot.readString();
            struct.primaryKeyNames.add(_elem64);
          }
        }
        struct.setPrimaryKeyNamesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.autoIncremental = iprot.readBool();
        struct.setAutoIncrementalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.versionColumn = iprot.readString();
        struct.setVersionColumnIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.updatableColumnNames = new java.util.ArrayList<String>(_list66.size);
          @org.apache.thrift.annotation.Nullable String _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = iprot.readString();
            struct.updatableColumnNames.add(_elem67);
          }
        }
        struct.setUpdatableColumnNamesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.insertableColumnNames = new java.util.ArrayList<String>(_list69.size);
          @org.apache.thrift.annotation.Nullable String _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readString();
            struct.insertableColumnNames.add(_elem70);
          }
        }
        struct.setInsertableColumnNamesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fieldMap = new java.util.HashMap<String, String>(2*_map72.size);
          @org.apache.thrift.annotation.Nullable String _key73;
          @org.apache.thrift.annotation.Nullable String _val74;
          for (int _i75 = 0; _i75 < _map72.size; ++_i75)
          {
            _key73 = iprot.readString();
            _val74 = iprot.readString();
            struct.fieldMap.put(_key73, _val74);
          }
        }
        struct.setFieldMapIsSet(true);
      }
      if (incoming.get(10)) {
        struct.identityField = iprot.readString();
        struct.setIdentityFieldIsSet(true);
      }
      if (incoming.get(11)) {
        struct.mapType = iprot.readBool();
        struct.setMapTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

